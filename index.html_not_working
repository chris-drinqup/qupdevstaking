<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>QUP Vault Tester - REAL Staking</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            text-align: center;
            color: white;
            margin-bottom: 30px;
        }

        .header h1 {
            font-size: 2.5rem;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }

        .status-badge {
            display: inline-block;
            background: #4CAF50;
            color: white;
            padding: 8px 16px;
            border-radius: 20px;
            font-weight: bold;
            margin: 10px 0;
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.7; }
            100% { opacity: 1; }
        }

        .main-content {
            background: white;
            border-radius: 20px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.2);
            overflow: hidden;
            padding: 30px;
        }

        .step-section {
            background: #f8f9fa;
            padding: 25px;
            border-radius: 10px;
            margin: 20px 0;
            border-left: 4px solid #667eea;
        }

        .step-header {
            font-size: 1.5rem;
            color: #667eea;
            margin-bottom: 15px;
            font-weight: bold;
        }

        .connect-btn {
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
            border: none;
            padding: 15px 30px;
            border-radius: 25px;
            font-size: 1.1rem;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(0,0,0,0.2);
            margin: 10px 0;
        }

        .connect-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(0,0,0,0.3);
        }

        .connect-btn:disabled {
            background: #ccc;
            cursor: not-allowed;
            transform: none;
        }

        .action-btn {
            background: #4CAF50;
            color: white;
            border: none;
            padding: 12px 25px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 1rem;
            transition: all 0.3s ease;
            margin: 5px;
        }

        .action-btn:hover {
            background: #45a049;
            transform: translateY(-1px);
        }

        .action-btn:disabled {
            background: #ccc;
            cursor: not-allowed;
            transform: none;
        }

        .balance-display {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin: 20px 0;
        }

        .balance-card {
            background: linear-gradient(45deg, #4CAF50, #45a049);
            color: white;
            padding: 20px;
            border-radius: 10px;
            text-align: center;
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        }

        .balance-card h3 {
            margin-bottom: 10px;
            opacity: 0.9;
        }

        .balance-card .amount {
            font-size: 1.5rem;
            font-weight: bold;
        }

        .staking-section {
            background: linear-gradient(45deg, #ff9a56, #ffad56);
            color: white;
            padding: 25px;
            border-radius: 10px;
            margin: 20px 0;
        }

        .stake-controls {
            display: flex;
            align-items: center;
            gap: 15px;
            margin: 15px 0;
            flex-wrap: wrap;
        }

        .stake-input {
            flex: 1;
            min-width: 150px;
            padding: 12px;
            border: 2px solid #ddd;
            border-radius: 8px;
            font-size: 1rem;
        }

        .stake-input:focus {
            outline: none;
            border-color: #667eea;
        }

        .rewards-display {
            background: linear-gradient(45deg, #ff6b6b, #ee5a6f);
            color: white;
            padding: 20px;
            border-radius: 10px;
            text-align: center;
            margin: 20px 0;
        }

        .loading {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid #f3f3f3;
            border-top: 3px solid #667eea;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .log-section {
            background: #2d3748;
            color: #e2e8f0;
            padding: 20px;
            border-radius: 10px;
            max-height: 300px;
            overflow-y: auto;
            font-family: 'Courier New', monospace;
            font-size: 0.9rem;
            margin-top: 20px;
        }

        .log-entry {
            margin-bottom: 5px;
            padding: 2px 0;
        }

        .log-success { color: #68d391; }
        .log-error { color: #f56565; }
        .log-info { color: #63b3ed; }
        .log-warning { color: #f6e05e; }

        .warning-box {
            background: #fff3cd;
            border: 1px solid #ffeaa7;
            color: #856404;
            padding: 15px;
            border-radius: 8px;
            margin: 15px 0;
        }

        .success-box {
            background: #d4edda;
            border: 1px solid #c3e6cb;
            color: #155724;
            padding: 15px;
            border-radius: 8px;
            margin: 15px 0;
        }

        .progress-steps {
            display: flex;
            justify-content: space-between;
            margin: 20px 0;
            flex-wrap: wrap;
        }

        .progress-step {
            flex: 1;
            text-align: center;
            padding: 10px;
            margin: 5px;
            border-radius: 8px;
            background: #f8f9fa;
            border: 2px solid #e9ecef;
            min-width: 120px;
        }

        .progress-step.completed {
            background: #d4edda;
            border-color: #4CAF50;
            color: #155724;
        }

        .progress-step.current {
            background: #fff3cd;
            border-color: #ffc107;
            color: #856404;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>🚀 QUP Vault - REAL Staking Test</h1>
            <div class="status-badge">✅ FUNCTIONAL ON DEVNET</div>
            <p>Actual transactions - Real staking rewards!</p>
        </div>

        <div class="main-content">
            <!-- Progress Steps -->
            <div class="progress-steps">
                <div class="progress-step" id="step1">
                    <strong>1. Connect</strong><br>
                    <small>Wallet</small>
                </div>
                <div class="progress-step" id="step2">
                    <strong>2. Get Tokens</strong><br>
                    <small>Request QUPDEV</small>
                </div>
                <div class="progress-step" id="step3">
                    <strong>3. Stake</strong><br>
                    <small>Earn Rewards</small>
                </div>
                <div class="progress-step" id="step4">
                    <strong>4. Claim</strong><br>
                    <small>Get Rewards</small>
                </div>
            </div>

            <!-- Step 1: Connect Wallet -->
            <div class="step-section" id="connectSection">
                <div class="step-header">Step 1: Connect Your Solana Wallet</div>
                <p>Make sure you're on <strong>DEVNET</strong> in your wallet settings!</p>
                <button id="connectBtn" class="connect-btn" onclick="connectWallet()">
                    Connect Wallet
                </button>
                <div id="walletStatus" style="margin-top: 15px;"></div>
            </div>

            <!-- Step 2: Balances & Token Request -->
            <div class="step-section" id="balanceSection" style="display: none;">
                <div class="step-header">Step 2: Your Balances</div>
                
                <div class="balance-display">
                    <div class="balance-card">
                        <h3>SOL Balance</h3>
                        <div class="amount" id="solBalance">Loading...</div>
                    </div>
                    <div class="balance-card">
                        <h3>QUPDEV Tokens</h3>
                        <div class="amount" id="qupdevBalance">Loading...</div>
                    </div>
                </div>

                <div id="needTokens" class="warning-box" style="display: none;">
                    <h4>🎯 Need Test Tokens?</h4>
                    <p><strong>Your Address:</strong> <span id="userAddress"></span></p>
                    <button class="action-btn" onclick="copyAddress()">📋 Copy Address</button>
                    <p>Post in Discord/Telegram: <strong>"Test tokens for: [your address]"</strong></p>
                    <p>You'll get 1000 QUPDEV + SOL for testing!</p>
                </div>

                <div id="hasTokens" class="success-box" style="display: none;">
                    <h4>✅ Ready to Stake!</h4>
                    <p>You have QUPDEV tokens. Time to test the staking vault!</p>
                </div>
            </div>

            <!-- Step 3: Staking Interface -->
            <div class="step-section" id="stakingSection" style="display: none;">
                <div class="step-header">Step 3: Stake Your Tokens</div>
                
                <div class="staking-section">
                    <h3>🔒 Stake QUPDEV Tokens</h3>
                    <p>Earn 1% daily rewards (compounds every second!)</p>
                    
                    <div class="stake-controls">
                        <input type="number" class="stake-input" id="stakeAmount" placeholder="Amount to stake (e.g., 100)" min="1">
                        <button class="action-btn" onclick="stakeTokens()" id="stakeBtn">
                            Stake Tokens
                        </button>
                    </div>
                    
                    <div style="margin-top: 10px;">
                        <button class="action-btn" onclick="setStakeAmount(25)">Stake 25</button>
                        <button class="action-btn" onclick="setStakeAmount(100)">Stake 100</button>
                        <button class="action-btn" onclick="setStakeAmount(500)">Stake 500</button>
                    </div>
                </div>

                <div class="rewards-display">
                    <h3>💰 Your Stake & Rewards</h3>
                    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin-top: 15px;">
                        <div>
                            <div>Staked Amount</div>
                            <div style="font-size: 1.5rem; font-weight: bold;" id="stakedAmount">0 QUPDEV</div>
                        </div>
                        <div>
                            <div>Pending Rewards</div>
                            <div style="font-size: 1.5rem; font-weight: bold;" id="pendingRewards">0 QUPDEV</div>
                        </div>
                    </div>
                    <button class="action-btn" onclick="refreshStakeInfo()" style="margin: 15px 5px;">
                        🔄 Refresh
                    </button>
                    <button class="action-btn" onclick="claimRewards()" id="claimBtn">
                        💎 Claim Rewards
                    </button>
                </div>

                <div class="staking-section">
                    <h3>🔓 Unstake Tokens</h3>
                    <p>Withdraw your staked tokens (keeps accumulated rewards)</p>
                    
                    <div class="stake-controls">
                        <input type="number" class="stake-input" id="unstakeAmount" placeholder="Amount to unstake" min="1">
                        <button class="action-btn" onclick="unstakeTokens()" id="unstakeBtn">
                            Unstake Tokens
                        </button>
                    </div>
                </div>
            </div>

            <!-- Testing Tools -->
            <div class="step-section">
                <div class="step-header">🧪 Quick Test Tools</div>
                <div style="text-align: center;">
                    <button class="action-btn" onclick="runQuickTest()" id="quickTestBtn" style="background: #ff9a56;">
                        ⚡ Auto Test (Stake → Wait → Claim → Unstake)
                    </button>
                    <button class="action-btn" onclick="openExplorer()">
                        🔍 View on Solana Explorer
                    </button>
                </div>
            </div>
        </div>

        <!-- Activity Log -->
        <div class="log-section">
            <h4>🔍 Activity Log</h4>
            <div id="logs">
                <div class="log-entry log-info">Welcome! Connect your wallet and request QUPDEV tokens to start testing.</div>
            </div>
        </div>
    </div>

    <!-- Solana Web3.js -->
    <script src="https://unpkg.com/@solana/web3.js@latest/lib/index.iife.min.js"></script>
    <script src="https://unpkg.com/@solana/spl-token@latest/lib/index.iife.min.js"></script>

    <script>
        // REAL Vault Configuration - Update these with your actual addresses
        const VAULT_CONFIG = {
            programId: new solanaWeb3.PublicKey('69GqjmqyXcL593ByVF4YqrFzBxHX5DsVcSRsAk49pPq7'),
            vaultPda: new solanaWeb3.PublicKey('FGCLTzWpKHmPLcak8HcqP7j7wz7jjLTWzZ1SwKNFfzuz'),
            tokenVaultPda: new solanaWeb3.PublicKey('HCw3qKrvemEwYzAzozqtwBtdapsWe7GfeCKjrUUPNSQf'),
            qupdevMint: new solanaWeb3.PublicKey('8bjKA2mkXMdkUHC6m8TfyQcksTDLKeP61XmFFcVViYef'),
            // ADD YOUR ACTUAL INSTRUCTION DISCRIMINATORS HERE:
            stakeDiscriminator: [48, 191, 163, 44, 71, 129, 63, 164], // From your manual_vault_init_fixed.js
            unstakeDiscriminator: [90, 95, 107, 42, 205, 124, 50, 225], // Add your unstake discriminator
            claimDiscriminator: [62, 198, 214, 193, 213, 159, 108, 210] // Add your claim discriminator
        };

        let wallet = null;
        let connection = null;
        let userTokenAccount = null;

        // Initialize connection
        connection = new solanaWeb3.Connection('https://api.devnet.solana.com', 'confirmed');

        // Logging function
        function addLog(message, type = 'info') {
            const logs = document.getElementById('logs');
            const timestamp = new Date().toLocaleTimeString();
            const logEntry = document.createElement('div');
            logEntry.className = `log-entry log-${type}`;
            logEntry.innerHTML = `[${timestamp}] ${message}`;
            logs.appendChild(logEntry);
            logs.scrollTop = logs.scrollHeight;
        }

        // Update progress steps
        function updateProgress(currentStep) {
            const steps = ['step1', 'step2', 'step3', 'step4'];
            steps.forEach((step, index) => {
                const element = document.getElementById(step);
                element.classList.remove('current', 'completed');
                if (index < currentStep - 1) {
                    element.classList.add('completed');
                } else if (index === currentStep - 1) {
                    element.classList.add('current');
                }
            });
        }

        // Wallet connection
        async function connectWallet() {
            const connectBtn = document.getElementById('connectBtn');
            const walletStatus = document.getElementById('walletStatus');

            try {
                connectBtn.disabled = true;
                connectBtn.innerHTML = '<span class="loading"></span> Connecting...';

                addLog('Looking for Solana wallets...', 'info');

                let provider = null;
                if (window.solana && window.solana.isPhantom) {
                    provider = window.solana;
                    addLog('Phantom wallet found!', 'success');
                } else if (window.solflare) {
                    provider = window.solflare;
                    addLog('Solflare wallet found!', 'success');
                } else if (window.backpack) {
                    provider = window.backpack;
                    addLog('Backpack wallet found!', 'success');
                } else if (window.solana) {
                    provider = window.solana;
                    addLog('Solana wallet found!', 'success');
                } else {
                    throw new Error('No Solana wallet found! Please install Phantom, Solflare, or Backpack.');
                }

                const response = await provider.connect();
                wallet = response.publicKey;

                addLog(`✅ Wallet connected: ${wallet.toString()}`, 'success');

                connectBtn.innerHTML = '✅ Connected';
                connectBtn.style.background = '#4CAF50';
                walletStatus.innerHTML = `
                    <div style="color: #4CAF50; font-weight: bold;">
                        ✅ Connected: ${wallet.toString().slice(0, 8)}...${wallet.toString().slice(-8)}
                    </div>
                `;

                document.getElementById('userAddress').textContent = wallet.toString();
                document.getElementById('balanceSection').style.display = 'block';

                updateProgress(2);
                await loadBalances();

            } catch (error) {
                addLog(`❌ Connection failed: ${error.message}`, 'error');
                connectBtn.disabled = false;
                connectBtn.innerHTML = 'Connect Wallet';
                walletStatus.innerHTML = `<div style="color: #f56565;">❌ ${error.message}</div>`;
            }
        }

        // Load balances
        async function loadBalances() {
            try {
                addLog('Loading your balances...', 'info');

                // SOL balance
                const solBalance = await connection.getBalance(wallet);
                const solFormatted = (solBalance / solanaWeb3.LAMPORTS_PER_SOL).toFixed(3);
                document.getElementById('solBalance').textContent = `${solFormatted} SOL`;

                // QUPDEV balance
                try {
                    const tokenAccounts = await connection.getTokenAccountsByOwner(wallet, {
                        mint: VAULT_CONFIG.qupdevMint
                    });

                    if (tokenAccounts.value.length > 0) {
                        userTokenAccount = tokenAccounts.value[0].pubkey;
                        const tokenBalance = await connection.getTokenAccountBalance(userTokenAccount);
                        const qupdevBalance = tokenBalance.value.uiAmount || 0;

                        document.getElementById('qupdevBalance').textContent = `${qupdevBalance} QUPDEV`;

                        if (qupdevBalance === 0) {
                            document.getElementById('needTokens').style.display = 'block';
                            addLog('⚠️ You need QUPDEV tokens to test staking!', 'warning');
                        } else {
                            document.getElementById('hasTokens').style.display = 'block';
                            document.getElementById('stakingSection').style.display = 'block';
                            updateProgress(3);
                            addLog(`✅ Found ${qupdevBalance} QUPDEV tokens - ready to stake!`, 'success');
                            await refreshStakeInfo();
                        }
                    } else {
                        document.getElementById('qupdevBalance').textContent = '0 QUPDEV';
                        document.getElementById('needTokens').style.display = 'block';
                        addLog('⚠️ No QUPDEV token account found. Request test tokens!', 'warning');
                    }
                } catch (tokenError) {
                    document.getElementById('qupdevBalance').textContent = '0 QUPDEV';
                    document.getElementById('needTokens').style.display = 'block';
                    addLog('⚠️ No QUPDEV tokens found. Request test tokens!', 'warning');
                }

            } catch (error) {
                addLog(`❌ Failed to load balances: ${error.message}`, 'error');
            }
        }

        // Get user stake PDA
        function getUserStakePda() {
            const [userStakePda] = solanaWeb3.PublicKey.findProgramAddressSync(
                [
                    Buffer.from('user_stake'),
                    wallet.toBuffer(),
                    VAULT_CONFIG.vaultPda.toBuffer()
                ],
                VAULT_CONFIG.programId
            );
            return userStakePda;
        }

        // Refresh stake info
        async function refreshStakeInfo() {
            if (!wallet) return;

            try {
                addLog('Checking your current stake...', 'info');
                
                const userStakePda = getUserStakePda();
                const userStakeAccount = await connection.getAccountInfo(userStakePda);

                if (userStakeAccount && userStakeAccount.data.length > 0) {
                    // TODO: Parse actual stake data using Borsh
                    // For now, showing placeholder - you need to implement proper deserialization
                    document.getElementById('stakedAmount').textContent = '??? QUPDEV';
                    document.getElementById('pendingRewards').textContent = '??? QUPDEV';
                    addLog('✅ Stake account found - parsing data...', 'success');
                    addLog('⚠️ Need to implement Borsh deserialization for exact amounts', 'warning');
                } else {
                    document.getElementById('stakedAmount').textContent = '0 QUPDEV';
                    document.getElementById('pendingRewards').textContent = '0 QUPDEV';
                    addLog('No existing stake found for this wallet', 'info');
                }

            } catch (error) {
                addLog(`❌ Failed to refresh stake info: ${error.message}`, 'error');
            }
        }

        // REAL staking function
        async function stakeTokens() {
            const amount = document.getElementById('stakeAmount').value;
            if (!amount || amount <= 0) {
                addLog('❌ Please enter a valid stake amount', 'warning');
                return;
            }

            if (!userTokenAccount) {
                addLog('❌ No QUPDEV token account found!', 'error');
                return;
            }

            try {
                const stakeBtn = document.getElementById('stakeBtn');
                stakeBtn.disabled = true;
                stakeBtn.innerHTML = '<span class="loading"></span> Staking...';

                addLog(`🔄 Building REAL stake transaction for ${amount} QUPDEV...`, 'info');

                // Get user stake PDA
                const userStakePda = getUserStakePda();

                // Build the REAL stake instruction
                const stakeInstruction = new solanaWeb3.TransactionInstruction({
                    programId: VAULT_CONFIG.programId,
                    keys: [
                        { pubkey: wallet, isSigner: true, isWritable: false },
                        { pubkey: userTokenAccount, isSigner: false, isWritable: true },
                        { pubkey: VAULT_CONFIG.tokenVaultPda, isSigner: false, isWritable: true },
                        { pubkey: userStakePda, isSigner: false, isWritable: true },
                        { pubkey: VAULT_CONFIG.vaultPda, isSigner: false, isWritable: true },
                        { pubkey: VAULT_CONFIG.qupdevMint, isSigner: false, isWritable: false },
                        { pubkey: splToken.TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },
                        { pubkey: solanaWeb3.SystemProgram.programId, isSigner: false, isWritable: false }
                    ],
                    data: Buffer.concat([
                        Buffer.from(VAULT_CONFIG.stakeDiscriminator),
                        Buffer.from(new solanaWeb3.BN(amount * 1e9).toArray('le', 8)) // Convert to lamports
                    ])
                });

                // Create and send transaction
                const transaction = new solanaWeb3.Transaction().add(stakeInstruction);
                const { blockhash } = await connection.getLatestBlockhash();
                transaction.recentBlockhash = blockhash;
                transaction.feePayer = wallet;

                addLog('📝 Requesting wallet signature...', 'info');
                
                // Sign and send transaction
                const signedTx = await window.solana.signTransaction(transaction);
                const signature = await connection.sendRawTransaction(signedTx.serialize());

                addLog('⏳ Confirming transaction...', 'info');
                addLog(`Transaction: ${signature}`, 'info');

                // Wait for confirmation
                await connection.confirmTransaction(signature, 'confirmed');

                addLog(`✅ Successfully staked ${amount} QUPDEV tokens!`, 'success');
                addLog('🎉 Rewards will start accumulating immediately!', 'success');

                document.getElementById('stakeAmount').value = '';
                updateProgress(4);
                await refreshStakeInfo();
                await loadBalances();

            } catch (error) {
            addLog(`❌ Staking failed: ${error.message}`, 'error');
                
                // Show helpful error messages
                if (error.message.includes('insufficient funds')) {
                    addLog('💡 Make sure you have enough SOL for transaction fees', 'warning');
                } else if (error.message.includes('rejected')) {
                    addLog('💡 Transaction was rejected by wallet', 'warning');
                }
            } finally {
                const st = document.getElementById('stakeBtn');
                stakeBtn.disabled = false;
                stakeBtn.innerHTML = 'Stake Tokens';
            }
        }

        // REAL unstaking function (similar structure)
        async function unstakeTokens() {
            const amount = document.getElementById('unstakeAmount').value;
            if (!amount || amount <= 0) {
                addLog('❌ Please enter a valid unstake amount', 'warning');
                return;
            }

            try {
              const unstakeBtn = document.getElementById('unstakeBtn');
                unstakeBtn.disabled = true;
                unstakeBtn.innerHTML = '<span class="loading"></span> Unstaking...';

                addLog(`🔄 Building REAL unstake transaction for ${amount} QUPDEV...`, 'info');

                // TODO: Implement actual unstake instruction similar to stake
                // You need to add the unstake discriminator to VAULT_CONFIG

                addLog('⚠️ Unstake function needs imptation with your unstake discriminator', 'warning');
                
                // Placeholder for now
                await new Promise(resolve => setTimeout(resolve, 2000));
                addLog('❌ Unstake not fully implemented yet', 'error');

            } catch (error) {
                addLog(`❌ Unstaking failed: ${error.message}`, 'error');
            } finally {
                const unstakeBtn = document.getElementById('unstakeBtn');
                unstakeBtn.disabled = false;
            unstakeBtn.innerHTML = 'Unstake Tokens';
            }
        }

        // REAL claim rewards function
        async function claimRewards() {
            try {
                const claimBtn = document.getElementById('claimBtn');
                claimBtn.disabled = true;
                claimBtn.innerHTML = '<span class="loading"></span> Claiming...';

                addLog('🔄 Building REAL claim rewards transaction...', 'info');

                // TODO: Implement actual claim instruction
              // You need to add the claim discriminator to VAULT_CONFIG

                addLog('⚠️ Claim function needs implementation with your claim discriminator', 'warning');

                // Placeholder for now
                await new Promise(resolve => setTimeout(resolve, 2000));
                addLog('❌ Claim not fully implemented yet', 'error');

            } catch (error) {
                addLog(`❌ Claiming failed: ${error.message}`, 'error');
            } finally {
                comBtn = document.getElementById('claimBtn');
                claimBtn.disabled = false;
                claimBtn.innerHTML = '💎 Claim Rewards';
            }
        }

        // Quick test function
        async function runQuickTest() {
            const quickTestBtn = document.getElementById('quickTestBtn');
            quickTestBtn.disabled = true;
            quickTestBtn.innerHTML = '<span class="loading"></span> Testing...';

            addLog('🧪 Starting comprehensive test sequence...', 'info
            try {
                // Auto-fill stake amount and trigger stake
                document.getElementById('stakeAmount').value = '25';
                addLog('Step 1: Staking 25 QUPDEV...', 'info');
                await stakeTokens();

                // Wait and refresh
                addLog('Step 2: Waiting 30 seconds for rewards...', 'info');
                for (let i = 30; i > 0; i--) {
                    if (i % 5 === 0) {
                        addLog(`⏳ ${i} seconds remaining...`,info');
                    }
                    await new Promise(resolve => setTimeout(resolve, 1000));
                }

                await refreshStakeInfo();
                addLog('Step 3: Claiming rewards...', 'info');
                await claimRewards();

                addLog('Step 4: Unstaking 10 tokens...', 'info');
                document.getElementById('unstakeAmount').value = '10';
                await unstakeTokens();

                addLog('🎉 Quick test completed!', 'success');
           } catch (error) {
                addLog(`❌ Quick test failed: ${error.message}`, 'error');
            } finally {
                quickTestBtn.disabled = false;
                quickTestBtn.innerHTML = '⚡ Auto Test';
            }
        }

        // Utility functions
        function setStakeAmount(amount) {
            document.getElementById('stakeAmount').value = amount;
            addLog(`Set stake amount to ${amount} QUPDEV`, 'info');
        }

        function copyAddress() {
        if (wallet) {
                navigator.clipboard.writeText(wallet.toString());
                addLog('✅ Wallet address copied to clipboard!', 'success');
            }
        }

        function openExplorer() {
            const url = `https://explorer.solana.com/address/${VAULT_CONFIG.vaultPda.toString()}?cluster=devnet`;
            window.open(url, '_blank');
            addLog('🔍 Opened vault in Solana Explorer', 'info');
        }

        // Initialize
        document.addEventListener('ontentLoaded', function() {
            addLog('🚀 QUP Vault Tester loaded successfully!', 'success');
            addLog('Connect your wallet to start REAL staking tests', 'info');
            updateProgress(1);

            // Test connection
            connection.getVersion().then(version => {
                addLog(`✅ Connected to Solana devnet (${version['solana-core']})`, 'success');
            }).catch(error => {
                addLog(`❌ Failed to connect to devnet: ${error.message}`, 'error          });
        });
    </script>
</body>
</html>
