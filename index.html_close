<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>QUP Vault - Staking Platform</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            text-align: center;
            color: white;
            margin-bottom: 30px;
        }

        .header h1 {
            font-size: 2.5rem;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }

        .status-badge {
            display: inline-block;
            background: #4CAF50;
            color: white;
            padding: 8px 16px;
            border-radius: 20px;
            font-weight: bold;
            margin: 10px 0;
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.7; }
            100% { opacity: 1; }
        }

        .main-content {
            background: white;
            border-radius: 20px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.2);
            overflow: hidden;
            padding: 30px;
        }

        .step-section {
            background: #f8f9fa;
            padding: 25px;
            border-radius: 10px;
            margin: 20px 0;
            border-left: 4px solid #667eea;
        }

        .step-header {
            font-size: 1.5rem;
            color: #667eea;
            margin-bottom: 15px;
            font-weight: bold;
        }

        .connect-btn {
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
            border: none;
            padding: 15px 30px;
            border-radius: 25px;
            font-size: 1.1rem;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(0,0,0,0.2);
            margin: 10px 0;
        }

        .connect-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(0,0,0,0.3);
        }

        .connect-btn:disabled {
            background: #ccc;
            cursor: not-allowed;
            transform: none;
        }

        .action-btn {
            background: #4CAF50;
            color: white;
            border: none;
            padding: 12px 25px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 1rem;
            transition: all 0.3s ease;
            margin: 5px;
        }

        .action-btn:hover {
            background: #45a049;
            transform: translateY(-1px);
        }

        .action-btn:disabled {
            background: #ccc;
            cursor: not-allowed;
            transform: none;
        }

        .balance-display {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin: 20px 0;
        }

        .balance-card {
            background: linear-gradient(45deg, #4CAF50, #45a049);
            color: white;
            padding: 20px;
            border-radius: 10px;
            text-align: center;
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        }

        .balance-card h3 {
            margin-bottom: 10px;
            opacity: 0.9;
        }

        .balance-card .amount {
            font-size: 1.5rem;
            font-weight: bold;
        }

        .staking-section {
            background: linear-gradient(45deg, #ff9a56, #ffad56);
            color: white;
            padding: 25px;
            border-radius: 10px;
            margin: 20px 0;
        }

        .stake-controls {
            display: flex;
            align-items: center;
            gap: 15px;
            margin: 15px 0;
            flex-wrap: wrap;
        }

        .stake-input {
            flex: 1;
            min-width: 150px;
            padding: 12px;
            border: 2px solid #ddd;
            border-radius: 8px;
            font-size: 1rem;
        }

        .stake-input:focus {
            outline: none;
            border-color: #667eea;
        }

        .rewards-display {
            background: linear-gradient(45deg, #ff6b6b, #ee5a6f);
            color: white;
            padding: 20px;
            border-radius: 10px;
            text-align: center;
            margin: 20px 0;
        }

        .loading {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid #f3f3f3;
            border-top: 3px solid #667eea;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .log-section {
            background: #2d3748;
            color: #e2e8f0;
            padding: 20px;
            border-radius: 10px;
            max-height: 300px;
            overflow-y: auto;
            font-family: 'Courier New', monospace;
            font-size: 0.9rem;
            margin-top: 20px;
        }

        .log-entry {
            margin-bottom: 5px;
            padding: 2px 0;
        }

        .log-success { color: #68d391; }
        .log-error { color: #f56565; }
        .log-info { color: #63b3ed; }
        .log-warning { color: #f6e05e; }

        .warning-box {
            background: #fff3cd;
            border: 1px solid #ffeaa7;
            color: #856404;
            padding: 15px;
            border-radius: 8px;
            margin: 15px 0;
        }

        .success-box {
            background: #d4edda;
            border: 1px solid #c3e6cb;
            color: #155724;
            padding: 15px;
            border-radius: 8px;
            margin: 15px 0;
        }

        .info-box {
            background: #d1ecf1;
            border: 1px solid #bee5eb;
            color: #0c5460;
            padding: 15px;
            border-radius: 8px;
            margin: 15px 0;
        }

        .info-box strong {
            color: #0a4c57;
        }

        .progress-steps {
            display: flex;
            justify-content: space-between;
            margin: 20px 0;
            flex-wrap: wrap;
        }

        .progress-step {
            flex: 1;
            text-align: center;
            padding: 10px;
            margin: 5px;
            border-radius: 8px;
            background: #f8f9fa;
            border: 2px solid #e9ecef;
            min-width: 120px;
            color: #495057;
            font-weight: 500;
            transition: all 0.3s ease;
        }

        .progress-step:hover {
            background: #e9ecef;
            border-color: #667eea;
            transform: translateY(-2px);
        }

        .progress-step.completed {
            background: #d4edda;
            border-color: #4CAF50;
            color: #155724;
            font-weight: 600;
        }

        .progress-step.completed:hover {
            background: #c3e6cb;
        }

        .progress-step.current {
            background: #fff3cd;
            border-color: #ffc107;
            color: #856404;
            font-weight: 600;
        }

        .progress-step.current:hover {
            background: #ffeaa7;
        }

        .progress-step strong {
            color: inherit;
            font-weight: 700;
        }

        .progress-step small {
            color: inherit;
            opacity: 0.8;
        }

        .tx-link {
            color: #63b3ed;
            text-decoration: underline;
            cursor: pointer;
        }

        .tx-link:hover {
            color: #68d391;
        }

        .calculator-section {
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
            padding: 25px;
            border-radius: 10px;
            margin: 20px 0;
        }

        .duration-selector {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
            gap: 10px;
            margin: 15px 0;
        }

        .duration-option {
            background: rgba(255,255,255,0.2);
            border: 2px solid rgba(255,255,255,0.3);
            color: white;
            padding: 10px;
            border-radius: 8px;
            cursor: pointer;
            text-align: center;
            transition: all 0.3s ease;
        }

        .duration-option:hover {
            background: rgba(255,255,255,0.3);
        }

        .duration-option.selected {
            background: rgba(255,255,255,0.4);
            border-color: white;
        }

        .rewards-calculator {
            background: rgba(255,255,255,0.1);
            padding: 20px;
            border-radius: 10px;
            margin: 15px 0;
        }

        .guide-box {
            background: #e3f2fd;
            border: 1px solid #bbdefb;
            color: #1565c0;
            padding: 20px;
            border-radius: 8px;
            margin: 15px 0;
        }

        .guide-box h4 {
            margin-bottom: 10px;
            color: #0d47a1;
        }

        .guide-box ol {
            padding-left: 20px;
        }

        .guide-box li {
            margin-bottom: 8px;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>QUP Vault - Staking Platform</h1>
            <div class="status-badge">DEVNET TESTING</div>
            <p>Stake your QUP tokens and earn rewards!</p>
            <!-- Wallet Setup Guide -->
            <div class="step-section">
                <div class="step-header">🔧 New to Solana? Wallet Setup Guide</div>
                <div class="info-box">
                    <h4>⚠️ Important: Use a Desktop/Laptop Browser (Not Mobile App)</h4>
                    <p><strong>This staking interface only works in desktop browsers with wallet extensions. Mobile wallet apps cannot connect to web applications like this one.</strong></p>
                </div>

                <div class="guide-box">
                    <h4>🦄 Step-by-Step: Install Phantom Wallet (Recommended)</h4>
                    <ol style="font-size: 1rem; line-height: 1.6;">
                        <li><strong>Go to:</strong> <a href="https://phantom.app" target="_blank" style="color: #667eea;">phantom.app</a> on your <strong>desktop browser</strong> (Chrome, Firefox, Edge, Safari)</li>
                        <li><strong>Click "Add to Chrome"</strong> (or your browser) - this installs the browser extension</li>
                        <li><strong>Click the Phantom icon</strong> in your browser's extension bar (top-right)</li>
                        <li><strong>Click "Create New Wallet"</strong> and follow the setup</li>
                        <li><strong>⚠️ SAVE YOUR SECRET PHRASE!</strong> Write it down safely</li>
                        <li><strong>Switch to Devnet:</strong>
                            <ul style="margin: 10px 0 10px 30px;">
                                <li>Click the gear icon ⚙️ in Phantom</li>
                                <li>Click "Developer Settings"</li>
                                <li>Turn ON "Testnet Mode"</li>
                                <li>Select "Devnet" from the network dropdown</li>
                            </ul>
                        </li>
                        <li><strong>Return to this page</strong> and click "Connect Wallet"</li>
                    </ol>
                </div>

                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin: 20px 0;">
                    <div class="guide-box" style="background: #e8f5e8;">
                        <h4 style="color: #2e7d32;">✅ Desktop Browser (Works)</h4>
                        <ul>
                            <li>Chrome + Phantom Extension</li>
                            <li>Firefox + Phantom Extension</li>
                            <li>Edge + Phantom Extension</li>
                            <li>Safari + Phantom Extension</li>
                        </ul>
                        <p><strong>Why it works:</strong> Browser extensions can interact with web pages</p>
                    </div>

                    <div class="guide-box" style="background: #ffebee;">
                        <h4 style="color: #c62828;">❌ Mobile Apps (Don't Work)</h4>
                        <ul>
                            <li>Phantom mobile app</li>
                            <li>Any mobile wallet app</li>
                            <li>Phone/tablet browsers</li>
                        </ul>
                        <p><strong>Why it doesn't work:</strong> Mobile apps can't connect to web staking interfaces</p>
                    </div>
                </div>

                <div class="warning-box">
                    <h4>🔄 Alternative Wallets (If Phantom doesn't work)</h4>
                    <p><strong>Try these other browser extensions:</strong></p>
                    <ul>
                        <li><strong>Solflare:</strong> <a href="https://solflare.com" target="_blank" style="color: #667eea;">solflare.com</a></li>
                        <li><strong>Backpack:</strong> <a href="https://backpack.app" target="_blank" style="color: #667eea;">backpack.app</a></li>
                    </ul>
                    <p>Follow the same steps: Install extension → Create wallet → Switch to Devnet → Connect</p>
                </div>

                <div class="success-box">
                    <h4>🎯 Quick Check: Is Your Setup Correct?</h4>
                    <ol>
                        <li>✅ Using desktop/laptop browser (not mobile)</li>
                        <li>✅ Wallet extension installed and visible</li>
                        <li>✅ Wallet set to "Devnet" (not Mainnet)</li>
                        <li>✅ This page loaded properly</li>
                    </ol>
                    <p><strong>If all above are ✅, click "Connect Wallet" at the top!</strong></p>
                </div>

                <div class="info-box">
                    <h4>🤔 Still Having Issues?</h4>
                    <p><strong>Common Solutions:</strong></p>
                    <ul>
                        <li><strong>Refresh this page</strong> after installing wallet</li>
                        <li><strong>Check if wallet extension is enabled</strong> in browser settings</li>
                        <li><strong>Try a different browser</strong> (Chrome works best)</li>
                        <li><strong>Make sure you're on Devnet</strong> in wallet settings</li>
                        <li><strong>Email chris@qupcorp.com</strong> if you're still stuck</li>
                    </ul>
                </div>
            </div>

        <div class="main-content">
            <!-- Progress Steps -->
            <div class="progress-steps">
                <div class="progress-step" id="step1" onclick="goToStep(1)" style="cursor: pointer;">
                    <strong>1. Connect</strong><br>
                    <small>Wallet</small>
                </div>
                <div class="progress-step" id="step2" onclick="goToStep(2)" style="cursor: pointer;">
                    <strong>2. Get Tokens</strong><br>
                    <small>Request QUPDEV</small>
                </div>
                <div class="progress-step" id="step3" onclick="goToStep(3)" style="cursor: pointer;">
                    <strong>3. Choose Plan</strong><br>
                    <small>Duration & Amount</small>
                </div>
                <div class="progress-step" id="step4" onclick="goToStep(4)" style="cursor: pointer;">
                    <strong>4. Stake & Earn</strong><br>
                    <small>Start Earning</small>
                </div>
            </div>

            <!-- Step 1: Connect Wallet -->
            <div class="step-section" id="connectSection">
                <div class="step-header">Step 1: Connect Your Solana Wallet</div>
                <div class="info-box" style="background: #e3f2fd; border-color: #90caf9; color: #1565c0;">
                    <strong style="color: #0d47a1;">Important:</strong> Make sure you're on <strong style="color: #0d47a1;">DEVNET</strong> in your wallet settings for testing!
                </div>
                <button id="connectBtn" class="connect-btn" onclick="connectWallet()">
                    Connect Wallet
                </button>
                <div id="walletStatus" style="margin-top: 15px;"></div>
            </div>

            <!-- Step 2: Balances & Token Request -->
            <div class="step-section" id="balanceSection" style="display: none;">
                <div class="step-header">Step 2: Your Balances & Get Test Tokens</div>

                <div class="balance-display">
                    <div class="balance-card">
                        <h3>SOL Balance</h3>
                        <div class="amount" id="solBalance">Loading...</div>
                        <small>For transaction fees</small>
                    </div>
                    <div class="balance-card">
                        <h3>QUPDEV Tokens</h3>
                        <div class="amount" id="qupdevBalance">Loading...</div>
                        <small>Available to stake</small>
                    </div>
                </div>

                <div id="needTokens" class="warning-box" style="display: none;">
                    <h4>📧 Get Your Test Tokens (Free!)</h4>
                    <div style="background: rgba(255,255,255,0.8); padding: 15px; border-radius: 8px; margin: 10px 0;">
                        <p><strong>Your Devnet Wallet Address:</strong></p>
                        <div style="background: #f8f9fa; padding: 10px; border-radius: 4px; font-family: monospace; word-break: break-all; margin: 5px 0;">
                            <span id="userAddress"></span>
                        </div>
                        <button class="action-btn" onclick="copyAddress()" style="margin-top: 10px;">
                            📋 Copy Address
                        </button>
                    </div>

                    <div style="background: rgba(76, 175, 80, 0.1); padding: 15px; border-radius: 8px; margin: 15px 0;">
                        <h5>📬 How to Get Test Tokens:</h5>
                        <ol style="margin: 10px 0;">
                            <li><strong>Copy your wallet address</strong> using the button above</li>
                            <li><strong>Send an email to:</strong> <a href="mailto:chris@qupcorp.com?subject=QUP Devnet Test Tokens Request&body=Hi Chris,%0A%0APlease send test tokens to my devnet wallet:%0A%0A[PASTE YOUR WALLET ADDRESS HERE]%0A%0AThanks!" style="color: #667eea; font-weight: bold;">chris@qupcorp.com</a></li>
                            <li><strong>Subject:</strong> "QUP Devnet Test Tokens Request"</li>
                            <li><strong>Include your wallet address</strong> in the email</li>
                            <li><strong>Wait for tokens</strong> (usually within a few hours)</li>
                            <li><strong>Refresh this page</strong> once you receive the tokens</li>
                        </ol>
                    </div>

                    <div style="background: rgba(255, 193, 7, 0.1); padding: 15px; border-radius: 8px; margin: 15px 0;">
                        <h5>⚡ Quick Email Template:</h5>
                        <div style="background: #f8f9fa; padding: 10px; border-radius: 4px; font-size: 0.9rem; margin: 10px 0;">
                            <strong>To:</strong> chris@qupcorp.com<br>
                            <strong>Subject:</strong> QUP Devnet Test Tokens Request<br><br>
                            Hi Chris,<br><br>
                            Please send test tokens to my devnet wallet:<br>
                            [PASTE YOUR WALLET ADDRESS HERE]<br><br>
                            Thanks!
                        </div>
                        <button class="action-btn" onclick="openEmailTemplate()" style="background: #ffc107; color: #333;">
                            📧 Open Email Template
                        </button>
                    </div>

                    <div style="background: rgba(33, 150, 243, 0.1); padding: 15px; border-radius: 8px; margin: 15px 0;">
                        <h5>ℹ️ What You'll Receive:</h5>
                        <ul style="margin: 10px 0;">
                            <li><strong>1000 QUPDEV tokens</strong> - For testing staking</li>
                            <li><strong>Some SOL</strong> - For transaction fees</li>
                            <li><strong>Full testing access</strong> - Try all staking features</li>
                        </ul>
                        <p><strong>Note:</strong> These are test tokens on Solana devnet only - not real value.</p>
                    </div>
                </div>

                <div id="hasTokens" class="success-box" style="display: none;">
                    <h4>Ready for Staking!</h4>
                    <p>You have QUPDEV tokens. Let's set up your staking plan!</p>
                </div>
            </div>

            <!-- Step 3: Staking Calculator & Plan Selection -->
            <div class="step-section" id="calculatorSection" style="display: none;">
                <div class="step-header">Step 3: Plan Your Staking Strategy</div>

                <div class="guide-box">
                    <h4>Complete Staking Journey (Simple as 1-2-3!):</h4>
                    <ol>
                        <li><strong>Stake Your Tokens:</strong> Lock up your QUP tokens for a chosen time period</li>
                        <li><strong>Walk Away & Earn:</strong> Your tokens automatically earn rewards 24/7 while you do nothing!</li>
                        <li><strong>Come Back & Collect:</strong> Return anytime to claim your earned rewards + original tokens</li>
                    </ol>
                    <div style="background: rgba(76, 175, 80, 0.1); padding: 15px; border-radius: 8px; margin-top: 15px;">
                        <strong>💡 Example:</strong> Stake 1000 QUP for 1 week (12% APY) → Come back in 7 days → Claim 1002.3 QUP (you earned 2.3 QUP for doing nothing!)
                    </div>
                </div>

                <div class="calculator-section">
                    <h3>Staking Calculator</h3>

                    <div style="margin: 15px 0;">
                        <label for="stakeAmountCalc" style="display: block; margin-bottom: 5px;">Amount to Stake:</label>
                        <input type="number" id="stakeAmountCalc" class="stake-input" placeholder="Enter amount (e.g., 100)"
                               style="background: rgba(255,255,255,0.9); color: #333;"
                               oninput="calculateRewards()" min="1">
                    </div>

                    <div style="margin: 15px 0;">
                        <label style="display: block; margin-bottom: 10px;">Staking Duration:</label>
                        <div class="duration-selector">
                            <div class="duration-option" onclick="selectDuration(7, 12)" data-duration="7">
                                <strong>7 Days</strong><br>
                                <small>12% APY</small>
                            </div>
                            <div class="duration-option" onclick="selectDuration(30, 18)" data-duration="30">
                                <strong>30 Days</strong><br>
                                <small>18% APY</small>
                            </div>
                            <div class="duration-option" onclick="selectDuration(90, 25)" data-duration="90">
                                <strong>90 Days</strong><br>
                                <small>25% APY</small>
                            </div>
                            <div class="duration-option" onclick="selectDuration(365, 35)" data-duration="365">
                                <strong>1 Year</strong><br>
                                <small>35% APY</small>
                            </div>
                        </div>
                    </div>

                    <div class="rewards-calculator" id="rewardsPreview">
                        <h4>Rewards Preview</h4>
                        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin-top: 10px;">
                            <div>
                                <div>Daily Rewards:</div>
                                <div style="font-size: 1.2rem; font-weight: bold;" id="dailyRewards">0 QUP</div>
                            </div>
                            <div>
                                <div>Total After Duration:</div>
                                <div style="font-size: 1.2rem; font-weight: bold;" id="totalRewards">0 QUP</div>
                            </div>
                        </div>
                    </div>

                    <button class="action-btn" onclick="proceedToStaking()" id="proceedBtn" style="background: #4CAF50; font-size: 1.1rem; padding: 15px 30px;" disabled>
                        Proceed to Staking
                    </button>
                </div>
            </div>

            <!-- Welcome Back Section for Returning Users -->
            <div class="step-section" id="welcomeBackSection" style="display: none;">
                <div class="step-header">🎉 Welcome Back! Your Tokens Have Been Working!</div>
                <div class="success-box">
                    <h4>Great News! Your staked tokens have been earning rewards while you were away!</h4>
                    <p>Here's what happened while you were gone:</p>
                    <ul>
                      <li>✅ Your tokens have been safely locked in the vault</li>
                        <li>💰 Rewards have been accumulating 24/7 automatically</li>
                        <li>📈 Your balance has grown without you doing anything!</li>
                    </ul>
                    <p><strong>Ready to see your earnings?</strong> Click refresh below to see how much you've made!</p>
                </div>
            </div>
            <div class="step-section" id="stakingSection" style="display;">
                <div class="step-header">Step 4: Execute Your Staking Plan</div>

                <div class="staking-section">
                    <h3>Confirm Your Staking Plan</h3>
                    <div id="stakingPlan" style="background: rgba(255,255,255,0.2); padding: 15px; border-radius: 8px; margin: 15px 0;">
                        <!-- Plan details will be filled here -->
                    </div>

                    <div class="stake-controls">
                        <button class="action-btn" onclick="executeStaking()" id="executeBtn" style="background: #ff6b6b; font-size: 1.1rem; padding: 15px 30px;">
                            Execute Staking Transaction
                        </button>
                    </div>
                </div>

                <div class="rewards-display" id="activeStakeSection" style="display: none;">
                    <h3>🎉 Your Tokens Are Now Earning!</h3>
                    <div class="info-box" style="background: rgba(76, 175, 80, 0.1); border-color#4CAF50; color: #2e7d32;">
                        <h4>What happens next?</h4>
                        <ol>
                            <li><strong>Your tokens are working!</strong> They're earning rewards 24/7 automatically</li>
                            <li><strong>Come back anytime</strong> to check your growing rewards balance</li>
                            <li><strong>When ready:</strong> Click "Claim Rewards" to collect earnings, or "Unstake All" to get everything back</li>
                            <li><strong>No rush!</strong> The longer you wait, the more you earn</li>
                        </ol>
                        <p><strong>💰 Pro Tip:</strong> Bookmark this page and check back in a week to see your earnings grow!</p>
                    </div>

                    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin-top: 15px;">
                        <div style="background: rgba(255,255,255,0.9); color: #333; padding: 15px; bord-radius: 8px;">
                            <div style="font-size: 0.9rem; margin-bottom: 5px;">Your Staked Amount</div>
                            <div style="font-size: 1.5rem; font-weight: bold; color: #4CAF50;" id="stakedAmount">0 QUP</div>
                            <div style="font-size: 0.8rem; opacity: 0.7;">Locked and earning</div>
                        </div>
                        <div style="background: rgba(255,255,255,0.9); color: #333; padding: 15px; border-radius: 8px;">
                            <div style="font-size: 0.9rem; margin-bottom: 5px;">Rewards Earned</div>
                            <div style="font-size: 1.5rem; font-weight: bold; color: #ff9a56;" id="pendingRewards">0 QUP</div>
                            <div style="font-size: 0.8rem; opacity: 0.7;">Ready to claim</div>
                        </div>
                        <div style="background: rgba(255,255,255,0.9); color: #333; padding: 15px; border-radius: 8px;">
                            <div style="font-size: 0.9rem; margin-bottom: 5px;">Time Staked</div>
                            <div style="font-size: 1.5rem; font-weight: bold; color: #667eea;" id="timeStaked">0 days</div>
                            <div style="font-size: 0.8rem; opacity: 0.7;">Keep earning!</div>
                        </div>
                    </div>

                    <div style="margin-top: 30px; text-align: center;">
                        <h4 style="margin-bottom: 15px;">🎯 Ready to Collect Your Earnings?</h4>
                      <div style="background: rgba(255,255,255,0.2); padding: 20px; border-radius: 10px; margin-bottom: 20px;">
                            <p style="margin-bottom: 15px;"><strong>Two Options:</strong></p>
                            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin-bottom: 20px;">
                                <div style="background: rgba(255,193,7,0.2); padding: 15px; border-radius: 8px;">
                                    <h5>🎁 Claim Rewards Only</h5>
                                   <p style="font-size: 0.9rem;">Get your earned tokens, keep staking the original amount</p>
                                </div>
                                <div style="background: rgba(255,154,86,0.2); padding: 15px; border-radius: 8px;">
                                    <h5>🏦 Unstake Everything</h5>
                                    <p style="font-size: 0.9rem;">Get all your tokens back (original + rewards)</p>
                                </div>
                          </div>
                        </div>

                        <button class="action-btn" onclick="refreshStakeInfo()" style="background: #667eea;">
                            🔄 Refresh My Earnings
                        </button>
                        <button class="action-btn" onclick="claimRewards()" id="claimBtn" style="background: #ffc107; color: #333;">
                            🎁 Claim My Rewards
                        </button>
                        <button class="actionn" onclick="unstakeEverything()" id="unstakeBtn" style="background: #ff9a56;">
                            🏦 Unstake Everything
                        </button>
                    </div>

                    <div style="background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px; margin-top: 20px;">
                        <h5>🕐 When Should I Come Back?</h5>
                        <p><strong>Anytime!</strong> But here are some good times:</p>
                        <ul style="text-align: ; margin-top: 10px;">
                            <li><strong>Tomorrow:</strong> See your first day of earnings</li>
                            <li><strong>End of week:</strong> Collect a full week of rewards</li>
                            <li><strong>Whenever you need tokens:</strong> Unstake anytime, no penalties</li>
                        </ul>
                    </div>
                </div>
            </div>

            <!-- Testing Tools (Only for DEVNET) -->
            <div class="step-section">
                <div class="step-header">Testing Tools (DEVNET Only)</div>
                <div class="info-box" style="background: #e8f5e8; border-color: #c8e6c9; color: #2e7d32;">
                    <p><strong style="color: #1b5e20;">For Testing:</strong> These tools help you test the staking functionality on devnet.</p>
                </div>
                <div style="text-align: center;">
                    <button class="action-btn" onclick="runQuickTest()" id="quickTestBtn" style="background: #ff9a56;">
                        Quick Test (Stake 25 for 1 min)
                    </button>
                    <button class="action-btn" onclick="openExplorer()">
                        View Vault on Explorer
                    </button>
                    <button class="action-btn" onclick="checkVaultState()">
                        Check Vault State
                    </button>
                </div>
            </div>
        </div>

        <!-- Activity Log -->
        <div class="log-section">
            <h4>Transaction Log</h4>
            <div id="logs">
                <div class="log-entry log-info">Welcome to QUP Vault! Connect your wallet to start staking.</div>
            </div>
        </div>
    </div>

    <!-- Solana Web3.js and SPL Token (Pinned Versions) -->
    <script src="https://unpkg.com/@solana/web3.js@1.78.0/lib/index.iife.min.js"></script>
    <script src="https://unpkg.com/@solana/spl-token@0.3.8/lib/index.iife.min.js"></script>

    <script>
        const VAULT_CONFIG = {
            programId: new solanaWeb3.PublicKey('69GqjmqyXcL593ByVF4YqrFzBxHX5DsVcSRsAk49pPq7'),
            vaultPda: new solanaWeb3.PublicKey('FGCLTzWpKHmPLcak8HcqP7j7wz7jjLTWzZ1SwKNFfzuz'),
            tokenVaultPda: new solanaWeb3.PublicKey('HCw3qKrvemEwYzAzozqtwBtdapsWe7GfeCKjrUUPNSQf'),
            qupdevMint: new solanaWeb3.PublicKey('8bjKA2mkXMdkUHC6m8TfyQcksTDLKeP61XmFFcVViYef'),
            stakeDiscriminator: [48, 191, 163, 44, 71, 129, 63, 164],
            unstakeDiscriminator: [90, 95, 107, 42, 205, 124, 50, 225],
            claimDiscriminator: [62, 198, 214, 193, 213, 159, 108, 210]
        };

        // Global state
        let wallet = null;
        let connection = null;
        let userTokenAccount = null;
        let provider = null;
        let selectedDuration = 0;
        let selectedAPY = 0;
        let calculatedAmount = 0;

        function initializeConnection() {
            if (typeof solanaWeb3 !== 'undefined') {
                connection = new solanaWeb3.Connection('https://api.devnet.solana.com', 'confirmed');
                return true;
            }
            return false;
        }

        function addLog(message, type = 'info') {
            const logs = document.getElementById('logs');
            const timestamp = new Date().toLocaleTimeString();
            const logEntry = document.createElement('div');
            logEntry.className = `log-entry log-${type}`;
            logEntry.innerHTML = `[${timestamp}] ${message}`;
            logs.appendChild(logEntry);
            logs.scrollTop = logs.scrollHeight;
        }

        function updateProgress(currentStep) {
            const steps = ['step1', 'step2', 'step3', 'step4'];
            steps.forEach((step, index) => {
                const element = document.getElementById(step);
                element.classList.remove('current', 'completed');
                if (index < currentStep - 1) {
                    element.classList.add('completed');
                } else if (index === currentStep - 1) {
                    element.classList.add('current');
                }
            });
        }

        function goToStep(stepNumber) {
            addLog(`Navigating to step ${stepNumber}`, 'info');

            document.getElementById('connectSection').style.display = 'none';
            document.getElementById('balanceSection').style.display = 'none';
            document.getElementById('calculatorSection').style.display = 'none';
            document.getElementById('stakingSection').style.display = 'none';
            document.getElementById('welcomeBackSection').style.display = 'none';

            switch(stepNumber) {
                case 1:
                    document.getElementById('connectSection').style.display = 'block';
                    updateProgress(1);
                    break;
                case 2:
                    if (!wallet) {
                        addLog('Please connect your wallet first!', 'warning');
                        alert('Please connect your wallet to proceed.');
                        goToStep(1);
                        return;
                    }
                    document.getElementById('balanceSection').style.display = 'block';
                    updateProgress(2);
                    break;
                case 3:
                    if (!wallet) {
                        addLog('Please connect your wallet first!', 'warning');
                        alert('Please connect your wallet to proceed.');
                        goToStep(1);
                        return;
                    }
                    if (!userTokenAccount) {
                        addLog('Please get test tokens first!', 'warning');
                        alert('Please request test tokens to proceed.');
                        goToStep(2);
                        return;
                    }
                    document.getElementById('calculatorSection').style.display = 'block';
                    updateProgress(3);
                    break;
                case 4:
                    if (!wallet) {
                        addLog('Please connect your wallet first!', 'warning');
                        alert('Please connect your wallet to proceed.');
                        goToStep(1);
                        return;
                    }
                    if (!userTokenAccount) {
                        addLog('Please get test tokens first!', 'warning');
                        alert('Please request test tokens to proceed.');
                        goToStep(2);
                        return;
                    }
                    if (calculatedAmount <= 0 || selectedDuration <= 0) {
                        addLog('Please plan your staking strategy first!', 'warning');
                        alert('Please select an amount and duration to proceed.');
                        goToStep(3);
                        return;
                    }
                    document.getElementById('stakingSection').style.display = 'block';
                    updateProgress(4);
                    break;
            }
        }

        async function connectWallet() {
            const connectBtn = document.getElementById('connectBtn');
            const walletStatus = document.getElementById('walletStatus');

            try {
                connectBtn.disabled = true;
                connectBtn.innerHTML = '<span class="loading"></span> Connecting...';
                addLog('Looking for Solana wallets...', 'info');

                if (window.solana && window.solana.isPhantom) {
                    provider = window.solana;
                    addLog('Phantom wallet detected!', 'success');
                } else if (window.solflare) {
                    provider = window.solflare;
                    addLog('Solflare wallet detected!', 'success');
                } else if (window.backpack) {
                    provider = window.backpack;
                    addLog('Backpack wallet detected!', 'success');
                } else {
                    throw new Error('No Solana wallet found! Please install Phantom, Solflare, or Backpack and ensure the extension is enabled.');
                }

                if (!provider.isConnected && !provider.publicKey) {
                    addLog('Wallet extension detected but not initialized. Please open the wallet and ensure it’s set to Devnet.', 'warning');
                    throw new Error('Wallet not initialized. Please open your wallet extension and set it to Devnet.');
                }

                const response = await provider.connect()                wallet = response.publicKey;

                const isDevnet = await connection.getRpcEndpoint().includes('devnet');
                if (!isDevnet) {
                    addLog('Wallet is not on Devnet! Please switch to Devnet in your wallet settings.', 'error');
                    provider.disconnect();
                    throw new Error('Please switch your wallet to Solana Devnet.');
                }

                addLog(`Wallet connected: ${wallet.toString()}`, 'success');

                connectBtn.innerHTML = 'Connected';
                connectBtn.style.background = '#4CAF50';
                walletStatus.innerHTML = `<div style="color: #4CAF50; font-weight: bold;">Connected: ${wallet.toString().slice(0, 8)}...${wallet.toString().slice(-8)}</div>`;

                document.getElementById('userAddress').textContent = wallet.toString();
                document.getElementById('balanceSection').style.display = 'block';

                updateProgress(2);
                await loadBalances();

            } catch (error) {
                addLog(`Connection failed: ${error.message}`, 'error');
                alert(`Failed to connect wallet: ${error.message}`);
                connectBtn.disabled = false;
                connectBtn.innerHTML = 'Connect Wallet';
                walletStatus.innerHTML = `<div style="color: #f56565;">${error.message}</div>`;
            }
        }

        async function loadBalances() {
            try {
                addLog('Loading your balances...', 'info');

                const solBalance = await connection.getBalance(wallet);
                const solFormatted = (solBalance / solanaWeb3.LAMPORTS_PER_SOL).toFixed(3);
                document.getElementById('solBalance').textContent = `${solFormatted} SOL`;

                try {
                    const tokenAccounts = await connection.getTokenAccountsByOwner(wallet, {
                        mint: VAULT_CONFIG.qupdevMint
                    });

                    if (tokenAccounts.value.length > 0) {
                        userTokenAccount = tokenAccounts.value[0].pubkey;
                        const tokenBalance = await connection.getTokenAccountBalance(userTokenAccount);
                        const qupdevBalance = tokenBalance.value.uiAmount || 0;

                        document.getElementById('qupdevBalance').textContent = `${qupdevBalance} QUPDEV`;

                        if (qupdevBalance === 0) {
                            document.getElementById('needTokens').style.display = 'block';
                            document.getElementById('hasTokens').style.display = 'none';
                            addLog('You need QUPDEV tokens to stake!', 'warning');
                        } else {
                            document.getElementById('hasTokens').style.display = 'block';
                            document.getElementById('needTokens').style.display = 'none';
                            document.getElementById('calculatorSection').style.display = 'block';
                            updateProgress(3);
                            addLog(`Found ${qupdevBalance} QUPDEV tokens - ready for staking!`, 'success');
                            await refreshStakeInfo();
                        }
                    } else {
                        document.getElementById('qupdevBalance').textContent = '0 QUPDEV';
                        document.getElementById('needTokens').style.display = 'block';
                        document.getElementById('hasTokens').style.display = 'none';
                        addLog('No QUPDEV token account found. Request test tokens!', 'warning');
                    }
                } catch (tokenError) {
                    document.getElementById('qupdevBalance').textContent = '0 QUPDEV';
                    document.getElementById('needTokens').style.display = 'block';
                    document.getElementById('hasTokens').style.display = 'none';
                    addLog('No QUPDEV tokens found. Request test tokens!', 'warning');
                }

            } catch (error) {
                addLog(`Failed to load balances: ${error.message}`, 'error');
                alert(`Error loading balances: ${error.message}`);
            }
        }

        function selectDuration(days, apy) {
            selectedDuration = days;
            selectedAPY = apy;

            document.querySelectorAll('.duration-option').forEach(option => {
                option.classList.remove('selected');
            });
            document.querySelector(`[data-duration="${days}"]`).classList.add('selected');

            calculateRewards();
            addLog(`Selected ${days} day plan with ${apy}% APY`, 'info');
        }

        function calculateRewards() {
            const amount = parseFloat(document.getElementById('stakeAmountCalc').value) || 0;

            if (amount > 0 && selectedAPY > 0) {
                const dailyRate = selectedAPY / 100 / 365;
                const dailyReward = amount * dailyRate;
                const totalReward = amount * (selectedAPY / 100) * (selectedDuration / 365);

                document.getElementById('dailyRewards').textContent = `${dailyReward.toFixed(4)} QUP`;
                document.getElementById('totalRewards').textContent = `${(amount + totalReward).toFixed(2)} QUP`;

                calculatedAmount = amount;
                document.getElementById('proceedBtn').disabled = false;
            } else {
                document.getElementById('dailyRewards').textContent = '0 QUP';
                document.getElementById('totalRewards').textContent = '0 QUP';
                document.getElementById('proceedBtn').disabled = true;
            }
        }

        function proceedToStaking() {
            if (calculatedAmount <= 0 || selectedDuration <= 0) {
                addLog('Please select amount and duration first!', 'error');
                alert('Please enter a valid amount and select a duration.');
                return;
            }

            const planHTML = `
                <h4>Your Staking Plan:</h4>
                <p><strong>Amount:</strong> ${calculatedAmount} QUPDEV</p>
                <p><strong>Duration:</strong> ${selectedDuration} days</p>
                <p><strong>APY:</strong> ${selectedAPY}%</p>
                <p><strong>Expected Daily Rewards:</strong> ${(calculatedAmount * selectedAPY / 100 / 365).toFixed(4)} QUP</p>
                <p><strong>Total After ${selectedDuration} Days:</strong> ${(calculatedAmount + calculatedAmount * selectedAPY / 100 * selectedDuration / 365).toFixed(2)} QUP</p>
            `;

            document.getElementById('stakingPlan').innerHTML = planHTML;
            document.getElementById('stakingSection').style.display = 'block';
            updateProgress(4);

            addLog('Ready to execute staking plan!', 'success');
        }

        async function executeStaking() {
            if (typeof solanaWeb3 === 'undefined') {
                addLog('Solana Web3.js library not loaded! Please refresh the page.', 'error');
                alert('Libraries still loading. Please wait a moment and try again.');
                return;
            }

            if (!wallet) {
                addLog('Please connect your wallet first!', 'error');
                alert('Please connect your wallet to proceed.');
                goToStep(1);
                return;
            }

            if (!userTokenAccount) {
                addLog('No QUPDEV token account found! Please request test tokens.', 'error');
                alert('Please request test tokens to proceed.');
                goToStep(2);
                return;
            }

            const solBalance = await connection.getBalance(wallet);
            const minSolRequired = 0.01 * solanaWeb3.LAMPORTS_PER_SOL;
            if (solBalance < minSolRequired) {
                addLog('Insufficient SOL for transaction fees! Need at least 0.01 SOL.', 'error');
                alert('Please request more SOL test tokens from chris@qupcorp.com.');
                return;
            }

            const tokenBalance = await connection.getTokenAccountBalance(userTokenAccount);
            const qupdevBalance = tokenBalance.value.uiAmount || 0;
            if (qupdevBalance < calculatedAmount) {
                addLog(`Insufficient QUPDEV tokens! You have ${qupdevBalance}, need ${calculatedAmount}.`, 'error');
                alert('Please request more QUPDEV test tokens.');
                return;
            }

            try {
                const executeBtn = document.getElementById('executeBtn');
                executeBtn.disabled = true;
                executeBtn.innerHTML = '<span class="loading"></span> Creating Transaction...';

                addLog(`Building staking transaction for ${calculatedAmount} QUPDEV...`, 'info');

                const userStakePda = getUserStakePda();
                const amountLamports = Math.floor(parseFloat(calculatedAmount) * 1e9);

                const amountBytes = new ArrayBuffer(8);
                const amountView = new DataView(amountBytes);
                amountView.setBigUint64(0, BigInt(amountLamports), true);

                const durationBytes = new ArrayBuffer(4);
                const durationView = new DataView(durationBytes);
                durationView.setUint32(0, selectedDuration, true);

                const discriminatorArray = new Uint8Array(VAULT_CONFIG.stakeDiscriminator);
                const amountArray = new Uint8Array(amountBytes);
                const durationArray = new Uint8Array(durationBytes);
                const instructionData = new Uint8Array(discriminatorArray.length + amountArray.length + durationArray.length);
                instructionData.set(discriminatorArray);
                instructionData.set(amountArray, discriminatorArray.length);
                instructionData.set(durationArray, discriminatorArray.length + amountArray.length);

                const stakeInstruction = new solanaWeb3.TransactionInstruction({
                    programId: VAULT_CONFIG.programId,
                    keys: [
                        { pubkey: wallet, isSigner: true, isWritable: false },
                        { pubkey: userTokenAccount, isSigner: false, isWritable: true },
                        { pubkey: VAULT_CONFIG.tokenVaultPda, isSigner: false, isWritable: true },
                        { pubkey: userStakePda, isSigner: false, isWritable: true },
                        { pubkey: VAULT_CONFIG.vaultPda, isSigner: false, isWritable: true },
                        { pubkey: VAULT_CONFIG.qupdevMint, isSigner: false, isWritable: false },
                        { pubkey: splToken.TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },
                        { pubkey: solanaWeb3.SystemProgram.programId, isSigner: false, isWritable: false }
                    ],
                    data: instructionData
                });

                const transaction = new solanaWeb3.Transaction().add(stakeInstruction);
                const latestBlockhash = await connection.getLatestBlockhash();
                transaction.recentBlockhash = latestBlockhash.blockhash;
                transaction.feePayer = wallet;

                addLog('Requesting wallet signature...', 'info');

                const signedTx = await provider.signTransaction(transaction);
                const signature = await connection.sendRawTransaction(signedTx.serialize());

                addLog('Confirming transaction on Solana...', 'info');
                addLog(`Transaction: <span class="tx-link" onclick="openTx('${signature}')">${signature.slice(0, 8)}...${signature.slice(-8)}</span>`, 'info');

                const confirmation = await connection.confirmTransaction(signature, 'confirmed');

                if (confirmation.value.err) {
                    throw new Error(`Transaction failed: ${JSON.stringify(confirmation.value.err)}`);
                }

                addLog(`Staking successful! Your ${calculatedAmount} QUPDEV is now earning ${selectedAPY}% APY!`, 'success');
                addLog('Rewards start accumulating immediately!', 'success');

                document.getElementById('activeStakeSection').style.display = 'block';
                await refreshStakeInfo();
                await loadBalances();

            } catch (error) {
                addLog(`Staking failed: ${error.message}`, 'error');
                if (error.message.includes('insufficient funds')) {
                    addLog('Make sure you have enough SOL for transaction fees', 'warning');
                } else if (error.message.includes('rejected')) {
                    addLog('Transaction was rejected by wallet', 'warning');
                } else if (error.message.includes('Invalid account')) {
                    addLog('Check if the vault program and PDAs are correctly configured.', 'error');
                }
                alert(`Staking failed: ${error.message}`);
            } finally {
                const executeBtn = document.getElementById('executeBtn');
                executeBtn.disabled = false;
                executeBtn.innerHTML = 'Execute Staking Transaction';
            }
        }

        function getUserStakePda() {
            const [pda] = solanaWeb3.PublicKey.findProgramAddressSync(
                [
                    new TextEncoder().encode('user_stake'),
                    wallet.toBuffer(),
                    VAULT_CONFIG.vaultPda.toBuffer()
                ],
                VAULT_CONFIG.programId
            );
            return pda;
        }

        async function refreshStakeInfo() {
            if (!wallet) {
                addLog('Please connect your wallet to check stake info.', 'warning');
                return;
            }

            try {
                addLog('Checking your latest earnings...', 'info');

                const userStakePda = getUserStakePda();
                const userStakeAccount = await connection.getAccountInfo(userStakePda);

                if (userStakeAccount && userStakeAccount.data.length > 0) {
                    addLog('Found your active stake! Calculating your earnings...', 'success');

                    // Assumed data layout: [8 bytes discriminator, 8 bytes amount (u64), 8 bytes rewards (u64), 4 bytes start_time (u32)]
                    const data = userStakeAccount.data;
                    const stakedAmount = Number(data.readBigUInt64LE(8)) / 1e9;
                    const rewards = Number(data.readBigUInt64LE(16)) / 1e9;
                    const startTime = data.readUInt32LE(24);
                    const daysStaked = Math.floor((Date.now() / 1000 - startTime) / (24 * 3600));

                    document.getElementById('welcomeBackSection').style.display = 'block';
                    document.getElementById('activeStakeSection').style.display = 'block';

                    document.getElementById('stakedAmount').textContent = `${stakedAmount.toFixed(2)} QUP`;
                    document.getElementById('pendingRewards').textContent = `${rewards.toFixed(4)} QUP`;
                    document.getElementById('timeStaked').textContent = `${daysStaked} days`;

                    addLog(`Current earnings: ${rewards.toFixed(4)} QUP (and growing!)`, 'success');
                    addLog(`Staked for: ${daysStaked} days`, 'info');
                    addLog('Tip: The longer you wait, the more you earn!', 'info');

                } else {
                    document.getElementById('stakedAmount').textContent = '0 QUP';
                    document.getElementById('pendingRewards').textContent = '0 QUP';
                    document.getElementById('timeStaked').textContent = '0 days';
                    addLog('No active stake found. Ready to start earning?', 'info');
                }

            } catch (error) {
                addLog(`Failed to refresh stake info: ${error.message}`, 'error');
                alert(`Error refreshing stake info: ${error.message}`);
            }
        }

        async function claimRewards() {
            if (!wallet || !userTokenAccount) {
                addLog('Please connect your wallet and ensure you have a QUPDEV token account.', 'error');
                alert('Please connect your wallet and ensure you have test tokens.');
                goToStep(wallet ? 2 : 1);
                return;
            }

            try {
                const claimBtn = document.getElementById('claimBtn');
                claimBtn.disabled = true;
                claimBtn.innerHTML = '<span class="loading"></span> Claiming Rewards...';

                addLog('Claiming your earned rewards...', 'info');

                const userStakePda = getUserStakePda();
                const instructionData = new Uint8Array(VAULT_CONFIG.claimDiscriminator);

                const claimInstruction = new solanaWeb3.TransactionInstruction({
                    programId: VAULT_CONFIG.programId,
                    keys: [
                        { pubkey: wallet, isSigner: true, isWritable: false },
                        { pubkey: userTokenAccount, isSigner: false, isWritable: true },
                        { pubkey: VAULT_CONFIG.tokenVaultPda, isSigner: false, isWritable: true },
                        { pubkey: userStakePda, isSigner: false, isWritable: true },
                        { pubkey: VAULT_CONFIG.vaultPda, isSigner: false, isWritable: true },
                        { pubkey: VAULT_CONFIG.qupdevMint, isSigner: false, isWritable: false },
                        { pubkey: splToken.TOKEN_PROGRAM_ID, isSigner: false, isWritable: false }
                    ],
                    data: instructionData
                });

                const transaction = new solanaWeb3.Transaction().add(claimInstruction);
                const latestBlockhash = await connection.getLatestBlockhash();
                transaction.recentBlockhash = latestBlockhash.blockhash;
                transaction.feePayer = wallet;

                addLog('Requesting wallet signature...', 'info');

                const signedTx = await provider.signTransaction(transaction);
                const signature = await connection.sendRawTransaction(signedTx.serialize());

                addLog('Confirming transaction on Solana...', 'info');
                addLog(`Transaction: <span class="tx-link" onclick="openTx('${signature}')">${signature.slice(0, 8)}...${signature.slice(-8)}</span>`, 'info');

                const confirmation = await connection.confirmTransaction(signature, 'confirmed');

                if (confirmation.value.err) {
                    throw new Error(`Transaction failed: ${JSON.stringify(confirmation.value.err)}`);
                }

                addLog('Rewards claimed successfully! Check your wallet balance.', 'success');
                addLog('Your original staked tokens are still earning more rewards!', 'info');

                await refreshStakeInfo();
                await loadBalances();

            } catch (error) {
                addLog(`Failed to claim rewards: ${error.message}`, 'error');
                alert(`Failed to claim rewards: ${error.message}`);
            } finally {
                const claimBtn = document.getElementById('claimBtn');
                claimBtn.disabled = false;
                claimBtn.innerHTML = '🎁 Claim My Rewards';
            }
        }

        async function unstakeEverything() {
            if (!confirm('Are you sure you want to unstake everything? This will return all your tokens (original + rewards) to your wallet and stop earning new rewards.')) {
                return;
            }

            if (!wallet || !userTokenAccount) {
                addLog('Please connect your wallet and ensure you have a QUPDEV token account.', 'error');
                art('Please connect your wallet and ensure you have test tokens.');
                goToStep(wallet ? 2 : 1);
                return;
            }

            try {
                const unstakeBtn = document.getElementById('unstakeBtn');
                unstakeBtn.disabled = true;
                unstakeBtn.innerHTML = '<span class="loading"></span> Unstaking Everything...';

                addLog('Unstaking all your tokens...', 'info');

                const userStakePda = getUserStakePda();
                const instructionData = new Uint8Array(VAULT_CONFIG.unstakeDiscriminator);

                const unstakeInstruction = new solanaWeb3.TransactionInstruction({
                    programId: VAULT_CONFIG.programId,
                    keys: [
                        { pubkey: wallet, isSigner: true, isWritable: false },
                        { pubkey: userTokenAccount, isSigner: false, isWritable: true },
                        { pubkey: VAULT_CONFIG.tokenVaultPda, isSigner: false, isWritable: true },
                        { pubkey: userStakePda, isSigner: false, isWritable: true },
                        { pubkey: VAULT_CONFIG.vaultPda, isSigner: false, isWritable: true },
                        { pubkey: VAULT_CONFIG.qupdevMint, isSigner: false, isWritable: false },
                        { pubkey: splToken.TOKEN_PROGRAM_ID, isSigner: false, isWritable: false }
                    ],
                    data: instructionData
                });

                const transaction = new solanaWeb3.Transaction().add(unstakeInstruction);
                const latestBlockhash = await connection.getLatestBlockhash();
                transaction.recentBlockhash = latestBlockhash.blockhash;
                transaction.feePayer = wallet;

                addLog('Requesting wallet signature...', 'info');

                const signedTx = await provider.signTransaction(transaction);
                const signature = await connection.sendRawTransaction(signedTx.serialize());

                addLog('Confirming transaction on Solana...', 'info');
                addLog(`Transaction: <span class="tx-link" onclick="openTx('${signature}')">${signature.slice(0, 8)}...${signature.slice(-8)}</span>`, 'info');

                const confirmation = await connection.confirmTransaction(signature, 'confirmed');

                if (confirmation.value.err) {
                    throw new Error(`Transaction failed: ${JSON.stringify(confirmation.value.err)}`);
                }

                addLog('All tokens unstaked successfully! Everything is back in your wallet.', 'success');
                addLog('You can now use your tokens or stake them again for more rewards!', 'info');

                document.getElementById('activeStakeSection').style.display = 'none';
                document.getElementById('calculatorSection').style.display = 'block';
                updateProgress(3);

                await refreshStakeInfo();
                await loadBalances();

            } catch (error) {
                addLog(`Failed to unstake: ${error.message}`, 'error');
                alert(`Failed to unstake: ${error.message}`);
            } finally {
                const unstakeBtn = document.getElementById('unstakeBtn');
                unstakeBtn.disabled = false;
                unstakeBtn.innerHTML = '🏦 Unstake Everything';
            }
        }

        async function runQuickTest() {
            if (!wallet || !userTokenAccount) {
                addLog('Please connect your wallet and get test tokens first.', 'error);
                alert('Please connect your wallet and get test tokens to run the quick test.');
                goToStep(wallet ? 2 : 1);
                return;
            }

            addLog('Starting quick test - staking 25 QUPDEV for testing...', 'info');

            calculatedAmount = 25;
            selectedDuration = 1;
            selectedAPY = 12;

            const stakingPlan = document.getElementById('stakingPlan');
            if (stakingPlan) {
                stakingPlan.innerHTML = `
                    <h4>Quick Test Plan:</h4>
                    <p><strong>Amount:</strong> 25 QUPDEV</p>
                    <p><strong>Duration:</strong> Testing (1 minute)</p>
                    <p><strong>Purpose:</strong> Verify staking functionality</p>
                `;
            }

            const stakingSection = document.getElementById('stakingSection');
            if (stakingSection) {
                stakingSection.style.display = 'block';
            }

            await executeStaking();
        }

        function copyAddress() {
            if (wallet) {
                navigator.clipboard.writeText(wallet.toString());
                addLog('Wallet address copied! Now email it to chris@qupcorp.com', 'success');

                const copyBtn = document.querySelector('button[onclick="copyAddress()"]');
                const originalText = copyBtn.innerHTML;
                copyBtn.innerHTML = '✅ Copied!';
                copyBtn.style.background = '#4CAF50';

                setTimet(() => {
                    copyBtn.innerHTML = originalText;
                    copyBtn.style.background = '';
                }, 2000);
            }
        }

        function openEmailTemplate() {
            if (wallet) {
                const walletAddress = wallet.toString();
                const subject = encodeURIComponent('QUP Devnet Test Tokens Request');
                const body = encodeURIComponent(`Hi Chris,\n\nPlease send test tokens to my devnet wallet:\n\n${walletAddress}\n\nThanks!`);

                const mailtoLink = `mailto:chris@qupcorp.com?subject=${subject}&body=${body}`;
                window.open(mailtoLink);

                addLog('Email template opened! Send the email and wait for your tokens.', 'success');
            }
        }

        function openExplorer() {
            const url = `https://explorer.solana.com/address/${VAULT_CONFIG.vaultPda.toString()}?cluster=devnet`;
            window.open(url, '_blank');
            addLog('Opened vault in Solana Explorer', 'info');
        }

        function openTx(signature) {
            const url = `https://explorer.solana.com/tx/${signature}?cluster=devnet`;
            window.open(url, '_blank');
            addLog('Opened transaction in Solana Explorer', 'info');
        }

        async function checkVaultState() {
            if (!wallet) {
                addLog('Please connect your wallet first to check vault state!', 'error');
                alert('Please connect your wallet first!');
                goToStep(1);
                return;
            }

            try {
                addLog('Checking vault state on-chain...', 'info');
                const vaultAccount = await connection.getAccountInfo(VAULT_CONFIG.vaultPda);
                if (vaultAccount) {
                    addLog(`Vault exists: ${vaultAccount.data.length} bytes, ${vaultAccount.lamports} lamports`, 'success');
                    addLog(`Owner: ${vaultAccount.owner.toString()}`, 'info');
                    alert('Vault is active! Check the log for details.');
                } else {
                    addLog('Vault account not found!', 'error');
                    alert('Vault account not found on the blockchain!');
                }
            } catch (error) {
                addLog(`Failed to check vault state: ${error.message}`, 'error');
                alert(`Error checking vault: ${error.message}`);
            }
        }

        document.addEventListener('DOMContentLoaded', () => {
            // Reset global state
            wallet = null;
            connection = null;
            userTokenAccount = null;
            provider = null;
            selectedDuration = 0;
            selectedAPY = 0;
            calculatedAmount = 0;

            let attempts = 0;
            const maxAttempts = 20;

            function initializeApp() {
                if (typeof solanaWeb3 === 'undefined' || typeof splToken === 'undefined') {
                    attempts++;
                    if (attempts >= maxAttempts) {
                        addLog('Error: Solana libraries failed to load. Please check your internet or try again later.', 'error');
                        alert('Failed to load required libraries. Please refresh the page or check your connection.');
                        return;
                    }
                    addLog('Loading Solana libraries...', 'info');
                    setTimeout(initializeApp, 500);
                    return;
                }

                if (!initializeConnection()) {
                    addLog('Failed to initialize Solana connection', 'error');
                    return;
                }

                addLog('QUP Vault Staking Platform loaded!', 'success');
                addLog('Connect your wallet to start earning rewards on your QUP tokens!', 'info');
                updateProgress(1);

                connection.getVersion().then(version => {
                    addLog(`Connected to Solana devnet (${version['solana-core']})`, 'success');
                }).catch(error => {
                    addLog(`Failed to connect to devnet: ${error.message}`, 'error');
                });
            }

            initializeApp();
        });
    </script>
</body>
</html>
