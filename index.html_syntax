<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>QUP Vault - Staking Platform</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }
        .container { max-width: 1200px; margin: 0 auto; padding: 20px; }
        .header { text-align: center; color: white; margin-bottom: 30px; }
        .header h1 { font-size: 2.5rem; margin-bottom: 10px; text-shadow: 2px 2px 4px rgba(0,0,0,0.3); }
        .status-badge {
            display: inline-block; background: #4CAF50; color: white; padding: 8px 16px;
            border-radius: 20px; font-weight: bold; margin: 10px 0; animation: pulse 2s infinite;
        }
        @keyframes pulse { 0% { opacity: 1; } 50% { opacity: 0.7; } 100% { opacity: 1; } }
        .main-content {
            background: white; border-radius: 20px; box-shadow: 0 10px 30px rgba(0,0,0,0.2);
            overflow: hidden; padding: 30px;
        }
        .step-section {
            background: #f8f9fa; padding: 25px; border-radius: 10px; margin: 20px 0;
            border-left: 4px solid #667eea;
        }
        .step-header { font-size: 1.5rem; color: #667eea; margin-bottom: 15px; font-weight: bold; }
        .connect-btn {
            background: linear-gradient(45deg, #667eea, #764ba2); color: white; border: none;
            padding: 15px 30px; border-radius: 25px; font-size: 1.1rem; cursor: pointer;
            transition: all 0.3s ease; box-shadow: 0 4px 15px rgba(0,0,0,0.2); margin: 10px 5px;
        }
        .connect-btn:hover { transform: translateY(-2px); box-shadow: 0 6px 20px rgba(0,0,0,0.3); }
        .connect-btn:disabled { background: #ccc; cursor: not-allowed; transform: none; }
        .action-btn {
            background: #4CAF50; color: white; border: none; padding: 12px 25px; border-radius: 8px;
            cursor: pointer; font-size: 1rem; transition: all 0.3s ease; margin: 5px;
        }
        .action-btn:hover { background: #45a049; transform: translateY(-1px); }
        .balance-display { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin: 20px 0; }
        .balance-card {
            background: linear-gradient(45deg, #4CAF50, #45a049); color: white; padding: 20px;
            border-radius: 10px; text-align: center; box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        }
        .balance-card h3 { margin-bottom: 10px; opacity: 0.9; }
        .balance-card .amount { font-size: 1.5rem; font-weight: bold; }
        .loading {
            display: inline-block; width: 20px; height: 20px; border: 3px solid #f3f3f3;
            border-top: 3px solid #667eea; border-radius: 50%; animation: spin 1s linear infinite;
        }
        @keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }
        .log-section {
            background: #2d3748; color: #e2e8f0; padding: 20px; border-radius: 10px;
            max-height: 300px; overflow-y: auto; font-family: 'Courier New', monospace;
            font-size: 0.9rem; margin-top: 20px;
        }
        .log-entry { margin-bottom: 5px; padding: 2px 0; }
        .log-success { color: #68d391; }
        .log-error { color: #f56565; }
        .log-info { color: #63b3ed; }
        .log-warning { color: #f6e05e; }
        .warning-box { background: #fff3cd; border: 1px solid #ffeaa7; color: #856404; padding: 15px; border-radius: 8px; margin: 15px 0; }
        .success-box { background: #d4edda; border: 1px solid #c3e6cb; color: #155724; padding: 15px; border-radius: 8px; margin: 15px 0; }
        .info-box { background: #d1ecf1; border: 1px solid #bee5eb; color: #0c5460; padding: 15px; border-radius: 8px; margin: 15px 0; }
        .guide-box { background: #e3f2fd; border: 1px solid #bbdefb; color: #1565c0; padding: 20px; border-radius: 8px; margin: 15px 0; }
        .guide-box h4 { margin-bottom: 10px; color: #0d47a1; }
        .guide-box ol { padding-left: 20px; }
        .guide-box li { margin-bottom: 8px; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>QUP Vault - Staking Platform</h1>
            <div class="status-badge">DEVNET TESTING</div>
            <p>Stake your QUP tokens and earn rewards!</p>

            <div class="step-section">
                <div class="step-header">üîß New to Solana? Wallet Setup Guide</div>
                <div class="info-box">
                    <h4>‚ö†Ô∏è Important: Use a Desktop/Laptop Browser (Not Mobile App)</h4>
                    <p><strong>This staking interface only works in desktop browsers with wallet extensions.</strong></p>
                </div>

                <div class="guide-box">
                    <h4>ü¶Ñ Step-by-Step: Install Phantom Wallet (Recommended)</h4>
                    <ol>
                        <li><strong>Go to:</strong> <a href="https://phantom.app" target="_blank" style="color: #667eea;">phantom.app</a> on your <strong>desktop browser</strong></li>
                        <li><strong>Click "Add to Chrome"</strong> - this installs the browser extension</li>
                        <li><strong>Click the Phantom icon</strong> in your browser's extension bar</li>
                        <li><strong>Click "Create New Wallet"</strong> and follow the setup</li>
                        <li><strong>‚ö†Ô∏è SAVE YOUR SECRET PHRASE!</strong> Write it down safely</li>
                        <li><strong>Switch to Devnet:</strong> Click gear icon ‚öôÔ∏è ‚Üí Developer Settings ‚Üí Turn ON "Testnet Mode" ‚Üí Select "Devnet"</li>
                        <li><strong>Return to this page</strong> and click "Connect Wallet"</li>
                    </ol>
                </div>

                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin: 20px 0;">
                    <div class="guide-box" style="background: #e8f5e8;">
                        <h4 style="color: #2e7d32;">‚úÖ Desktop Browser (Works)</h4>
                        <ul>
                            <li>Chrome + Phantom Extension</li>
                            <li>Firefox + Phantom Extension</li>
                            <li>Edge + Phantom Extension</li>
                        </ul>
                    </div>
                    <div class="guide-box" style="background: #ffebee;">
                        <h4 style="color: #c62828;">‚ùå Mobile Apps (Don't Work)</h4>
                        <ul>
                            <li>Phantom mobile app</li>
                            <li>Any mobile wallet app</li>
                            <li>Phone/tablet browsers</li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>

        <div class="main-content">
            <!-- Progress Steps -->
            <div style="display: flex; justify-content: space-between; margin: 20px 0; flex-wrap: wrap;">
                <div style="flex: 1; text-align: center; padding: 10px; margin: 5px; border-radius: 8px; background: #f8f9fa; border: 2px solid #e9ecef; min-width: 120px; color: #495057; font-weight: 500;">
                    <strong>1. Connect</strong><br>
                    <small>Wallet</small>
                </div>
                <div style="flex: 1; text-align: center; padding: 10px; margin: 5px; border-radius: 8px; background: #f8f9fa; border: 2px solid #e9ecef; min-width: 120px; color: #495057; font-weight: 500;">
                    <strong>2. Get Tokens</strong><br>
                    <small>Request QUPDEV</small>
                </div>
                <div style="flex: 1; text-align: center; padding: 10px; margin: 5px; border-radius: 8px; background: #f8f9fa; border: 2px solid #e9ecef; min-width: 120px; color: #495057; font-weight: 500;">
                    <strong>3. Choose Plan</strong><br>
                    <small>Duration & Amount</small>
                </div>
                <div style="flex: 1; text-align: center; padding: 10px; margin: 5px; border-radius: 8px; background: #f8f9fa; border: 2px solid #e9ecef; min-width: 120px; color: #495057; font-weight: 500;">
                    <strong>4. Stake & Earn</strong><br>
                    <small>Start Earning</small>
                </div>
            </div>

            <div class="step-section">
                <div class="step-header">Step 1: Connect Your Solana Wallet</div>
                <div class="info-box">
                    <strong>Important:</strong> Make sure you're on <strong>DEVNET</strong> in your wallet settings!
                </div>
                <button id="connectBtn" class="connect-btn">Connect Wallet</button>
                <button id="disconnectBtn" class="connect-btn" style="background: #ff6b6b; display: none;">Disconnect</button>
                <div id="walletStatus" style="margin-top: 15px;"></div>
            </div>

            <div class="step-section" id="balanceSection" style="display: none;">
                <div class="step-header">Step 2: Your Balances & Get Test Tokens</div>
                <div class="balance-display">
                    <div class="balance-card">
                        <h3>SOL Balance</h3>
                        <div class="amount" id="solBalance">Loading...</div>
                        <small>For transaction fees</small>
                    </div>
                    <div class="balance-card">
                        <h3>QUPDEV Tokens</h3>
                        <div class="amount" id="qupdevBalance">Loading...</div>
                        <small>Available to stake</small>
                    </div>
                </div>

                <div id="needTokens" class="warning-box" style="display: none;">
                    <h4>üìß Get Your Test Tokens (Free!)</h4>
                    <div style="background: rgba(255,255,255,0.8); padding: 15px; border-radius: 8px; margin: 10px 0;">
                        <p><strong>Your Devnet Wallet Address:</strong></p>
                        <div style="background: #f8f9fa; padding: 10px; border-radius: 4px; font-family: monospace; word-break: break-all; margin: 5px 0;">
                            <span id="userAddress"></span>
                        </div>
                        <button class="action-btn" id="copyBtn">üìã Copy Address</button>
                    </div>

                    <div style="background: rgba(76, 175, 80, 0.1); padding: 15px; border-radius: 8px; margin: 15px 0;">
                        <h5>üì¨ How to Get Test Tokens:</h5>
                        <ol style="margin: 10px 0;">
                            <li><strong>Copy your wallet address</strong> using the button above</li>
                            <li><strong>Send an email to:</strong> <a href="mailto:chris@qupcorp.com?subject=QUP%20Devnet%20Test%20Tokens%20Request&body=Hi%20Chris%2C%0A%0APlease%20send%20test%20tokens%20to%20my%20devnet%20wallet%3A%0A%0A%5BPASTE%20YOUR%20WALLET%20ADDRESS%20HERE%5D%0A%0AThanks!" style="color: #667eea; font-weight: bold;">chris@qupcorp.com</a></li>
                            <li><strong>Subject:</strong> "QUP Devnet Test Tokens Request"</li>
                            <li><strong>Include your wallet address</strong> in the email</li>
                            <li><strong>Wait for tokens</strong> (usually within a few hours)</li>
                            <li><strong>Refresh this page</strong> once you receive the tokens</li>
                        </ol>
                    </div>

                    <button class="action-btn" id="emailBtn" style="background: #ffc107; color: #333;">üìß Open Email Template</button>
                </div>

                <div id="hasTokens" class="success-box" style="display: none;">
                    <h4>Ready for Staking!</h4>
                    <p>You have QUPDEV tokens. Let's set up your staking plan!</p>
                    <button class="action-btn" id="proceedToStaking" style="background: #4CAF50; font-size: 1.1rem; padding: 15px 30px;">
                        Proceed to Step 3: Choose Staking Plan
                    </button>
                </div>
            </div>

            <!-- Step 3: Choose Staking Plan -->
            <div class="step-section" id="stakingPlanSection" style="display: none;">
                <div class="step-header">Step 3: Choose Your Staking Plan</div>

                <div class="guide-box">
                    <h4>How Staking Works:</h4>
                    <ol>
                        <li><strong>Choose Duration & Amount:</strong> Decide how long to stake and how much</li>
                        <li><strong>Lock Tokens:</strong> Your tokens are safely locked in the vault</li>
                        <li><strong>Earn Rewards:</strong> Automatic rewards accumulate 24/7</li>
                        <li><strong>Claim Anytime:</strong> Get your rewards + original tokens back</li>
                    </ol>
                </div>

                <div style="background: linear-gradient(45deg, #667eea, #764ba2); color: white; padding: 25px; border-radius: 10px; margin: 20px 0;">
                    <h3>Staking Calculator</h3>

                    <div style="margin: 15px 0;">
                        <label style="display: block; margin-bottom: 5px;">Amount to Stake:</label>
                        <input type="number" id="stakeAmount" style="width: 100%; padding: 12px; border: 2px solid #ddd; border-radius: 8px; font-size: 1rem; background: rgba(255,255,255,0.9); color: #333;"
                               placeholder="Enter amount (e.g., 100)" min="1" max="1000">
                        <small style="display: block; margin-top: 5px; opacity: 0.8;">Available: 1000 QUPDEV</small>
                    </div>

                    <div style="margin: 15px 0;">
                        <label style="display: block; margin-bottom: 10px;">Staking Duration:</label>
                        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(120px, 1fr)); gap: 10px;">
                            <div class="duration-option" data-duration="7" data-apy="12" style="background: rgba(255,255,255,0.2); border: 2px solid rgba(255,255,255,0.3); color: white; padding: 10px; border-radius: 8px; cursor: pointer; text-align: center; transition: all 0.3s ease;">
                                <strong>7 Days</strong><br>
                                <small>12% APY</small>
                            </div>
                            <div class="duration-option" data-duration="30" data-apy="18" style="background: rgba(255,255,255,0.2); border: 2px solid rgba(255,255,255,0.3); color: white; padding: 10px; border-radius: 8px; cursor: pointer; text-align: center; transition: all 0.3s ease;">
                                <strong>30 Days</strong><br>
                                <small>18% APY</small>
                            </div>
                            <div class="duration-option" data-duration="90" data-apy="25" style="background: rgba(255,255,255,0.2); border: 2px solid rgba(255,255,255,0.3); color: white; padding: 10px; border-radius: 8px; cursor: pointer; text-align: center; transition: all 0.3s ease;">
                                <strong>90 Days</strong><br>
                                <small>25% APY</small>
                            </div>
                            <div class="duration-option" data-duration="365" data-apy="35" style="background: rgba(255,255,255,0.2); border: 2px solid rgba(255,255,255,0.3); color: white; padding: 10px; border-radius: 8px; cursor: pointer; text-align: center; transition: all 0.3s ease;">
                                <strong>1 Year</strong><br>
                                <small>35% APY</small>
                            </div>
                        </div>
                    </div>

                    <div id="rewardsPreview" style="background: rgba(255,255,255,0.1); padding: 20px; border-radius: 10px; margin: 15px 0;">
                        <h4>Rewards Preview</h4>
                        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin-top: 10px;">
                            <div>
                                <div>Daily Rewards:</div>
                                <div style="font-size: 1.2rem; font-weight: bold;" id="dailyRewards">Select plan above</div>
                            </div>
                            <div>
                                <div>Total After Duration:</div>
                                <div style="font-size: 1.2rem; font-weight: bold;" id="totalRewards">Select plan above</div>
                            </div>
                        </div>
                    </div>

                    <button class="action-btn" id="confirmStakingPlan" style="background: #4CAF50; font-size: 1.1rem; padding: 15px 30px;" disabled>
                        Confirm Staking Plan
                    </button>
                </div>
            </div>

            <!-- Step 4: Execute Staking -->
            <div class="step-section" id="executeStakingSection" style="display: none;">
                <div class="step-header">Step 4: Execute Your Staking Plan</div>

                <div style="background: linear-gradient(45deg, #ff9a56, #ffad56); color: white; padding: 25px; border-radius: 10px; margin: 20px 0;">
                    <h3>Confirm Your Staking Plan</h3>
                    <div id="finalStakingPlan" style="background: rgba(255,255,255,0.2); padding: 15px; border-radius: 8px; margin: 15px 0;">
                        <!-- Plan details will be filled here -->
                    </div>

                    <button class="action-btn" id="executeStaking" style="background: #ff6b6b; font-size: 1.1rem; padding: 15px 30px;">
                        üöÄ Start Staking & Earning!
                    </button>
                </div>

                <div id="stakingSuccess" style="display: none; background: linear-gradient(45deg, #ff6b6b, #ee5a6f); color: white; padding: 20px; border-radius: 10px; text-align: center; margin: 20px 0;">
                    <h3>üéâ Your Tokens Are Now Earning!</h3>
                    <div style="background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px; margin: 15px 0;">
                        <h4>What happens next?</h4>
                        <p>‚úÖ Your tokens are working 24/7 earning rewards automatically!</p>
                        <p>üí∞ Come back anytime to check your growing rewards</p>
                        <p>üéÅ Click "Claim Rewards" when you want to collect earnings</p>
                        <p>üè¶ Or "Unstake All" to get everything back</p>
                    </div>

                    <div style="margin: 20px 0;">
                        <button class="action-btn" style="background: #ffc107; color: #333;">üéÅ Claim My Rewards</button>
                        <button class="action-btn" style="background: #ff9a56;">üè¶ Unstake Everything</button>
                    </div>

                    <p><strong>üí° Pro Tip:</strong> Bookmark this page and check back later to see your earnings grow!</p>
                </div>
            </div>

            <div class="step-section">
                <div class="step-header">Testing Tools (DEVNET Only)</div>
                <div style="text-align: center;">
                    <button class="action-btn" id="quickTestBtn" style="background: #ff9a56;">Quick Test</button>
                    <button class="action-btn" id="explorerBtn">View Vault on Explorer</button>
                    <button class="action-btn" id="vaultStateBtn">Check Vault State</button>
                </div>
            </div>
        </div>

        <div class="log-section">
            <h4>Transaction Log</h4>
            <div id="logs">
                <div class="log-entry log-info">Welcome to QUP Vault! Connect your wallet to start staking.</div>
            </div>
        </div>
    </div>

    <!-- Solana Web3.js - Primary CDN -->
    <script src="https://cdn.jsdelivr.net/npm/@solana/web3.js@1.78.0/lib/index.iife.min.js"></script>

    <!-- SPL Token hardcoded - we'll use Token Program ID directly -->
    <script>
        // Define SPL Token constants we need
        window.TOKEN_PROGRAM_ID = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA';

        // Mock splToken object to prevent undefined errors
        window.splToken = {
            TOKEN_PROGRAM_ID: new solanaWeb3.PublicKey('TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA')
        };

        console.log('Using hardcoded SPL Token constants - library not needed for basic staking');
    </script>

    <script>
        let wallet = null;
        let connection = null;
        let userTokenAccount = null;
        let provider = null;

        const VAULT_CONFIG = {
            programId: new solanaWeb3.PublicKey('69GqjmqyXcL593ByVF4YqrFzBxHX5DsVcSRsAk49pPq7'),
            vaultPda: new solanaWeb3.PublicKey('FGCLTzWpKHmPLcak8HcqP7j7wz7jjLTWzZ1SwKNFfzuz'),
            tokenVaultPda: new solanaWeb3.PublicKey('HCw3qKrvemEwYzAzozqtwBtdapsWe7GfeCKjrUUPNSQf'),
            qupdevMint: new solanaWeb3.PublicKey('8bjKA2mkXMdkUHC6m8TfyQcksTDLKeP61XmFFcVViYef')
        };

        function initConnection() {
            if (typeof solanaWeb3 !== 'undefined') {
                try {
                    connection = new solanaWeb3.Connection('https://api.devnet.solana.com', 'confirmed');
                    addLog('Successfully initialized Solana connection', 'success');
                    return true;
                } catch (error) {
                    addLog('Failed to create connection: ' + error.message, 'error');
                    return false;
                }
            }
            addLog('Solana Web3 library not available', 'error');
            return false;
        }

        function addLog(message, type) {
            const logs = document.getElementById('logs');
            const timestamp = new Date().toLocaleTimeString();
            const logEntry = document.createElement('div');
            logEntry.className = 'log-entry log-' + (type || 'info');
            logEntry.innerHTML = '[' + timestamp + '] ' + message;
            logs.appendChild(logEntry);
            logs.scrollTop = logs.scrollHeight;
        }

        async function connectWallet() {
            const connectBtn = document.getElementById('connectBtn');
            const walletStatus = document.getElementById('walletStatus');

            try {
                connectBtn.disabled = true;
                connectBtn.innerHTML = '<span class="loading"></span> Connecting...';
                addLog('Looking for Solana wallets...', 'info');

                if (window.solana && window.solana.isPhantom) {
                    provider = window.solana;
                    addLog('Phantom wallet detected!', 'success');
                } else if (window.solflare) {
                    provider = window.solflare;
                    addLog('Solflare wallet detected!', 'success');
                } else if (window.backpack) {
                    provider = window.backpack;
                    addLog('Backpack wallet detected!', 'success');
                } else {
                    throw new Error('No Solana wallet found! Please install Phantom, Solflare, or Backpack.');
                }

                const response = await provider.connect();
                wallet = response.publicKey;

                addLog('Wallet connected: ' + wallet.toString(), 'success');

                connectBtn.style.display = 'none';
                document.getElementById('disconnectBtn').style.display = 'inline-block';
                walletStatus.innerHTML = '<div style="color: #4CAF50; font-weight: bold;">Connected: ' + wallet.toString().slice(0, 8) + '...' + wallet.toString().slice(-8) + '</div>';

                document.getElementById('userAddress').textContent = wallet.toString();
                document.getElementById('balanceSection').style.display = 'block';

                await loadBalances();

            } catch (error) {
                addLog('Connection failed: ' + error.message, 'error');
                alert('Failed to connect wallet: ' + error.message);
                connectBtn.disabled = false;
                connectBtn.innerHTML = 'Connect Wallet';
                walletStatus.innerHTML = '<div style="color: #f56565;">' + error.message + '</div>';
            }
        }

        async function disconnectWallet() {
            try {
                if (provider && provider.disconnect) {
                    await provider.disconnect();
                }

                wallet = null;
                connection = null;
                userTokenAccount = null;
                provider = null;

                document.getElementById('connectBtn').style.display = 'inline-block';
                document.getElementById('disconnectBtn').style.display = 'none';
                document.getElementById('connectBtn').innerHTML = 'Connect Wallet';
                document.getElementById('connectBtn').disabled = false;
                document.getElementById('walletStatus').innerHTML = '';
                document.getElementById('balanceSection').style.display = 'none';
                document.getElementById('userAddress').textContent = '';
                document.getElementById('solBalance').textContent = 'Loading...';
                document.getElementById('qupdevBalance').textContent = 'Loading...';
                document.getElementById('needTokens').style.display = 'none';
                document.getElementById('hasTokens').style.display = 'none';

                addLog('Wallet disconnected successfully', 'success');
                initConnection();

            } catch (error) {
                addLog('Error disconnecting wallet: ' + error.message, 'error');
            }
        }

        async function loadBalances() {
            if (!wallet || !connection) {
                addLog('Wallet or connection not initialized', 'error');
                return;
            }

            try {
                addLog('Loading balances for wallet: ' + wallet.toString(), 'info');

                // Get SOL balance
                const solBalance = await connection.getBalance(wallet);
                const solFormatted = (solBalance / solanaWeb3.LAMPORTS_PER_SOL).toFixed(6);
                document.getElementById('solBalance').textContent = solFormatted + ' SOL';
                addLog('SOL balance loaded: ' + solFormatted + ' SOL', 'success');

                // Get QUPDEV token balance
                try {
                    addLog('Searching for QUPDEV token accounts...', 'info');
                    const tokenAccounts = await connection.getTokenAccountsByOwner(wallet, {
                        mint: VAULT_CONFIG.qupdevMint
                    });

                    addLog('Found ' + tokenAccounts.value.length + ' token accounts', 'info');

                    if (tokenAccounts.value.length > 0) {
                        userTokenAccount = tokenAccounts.value[0].pubkey;
                        addLog('Using token account: ' + userTokenAccount.toString(), 'info');

                        const tokenBalance = await connection.getTokenAccountBalance(userTokenAccount);
                        const qupdevBalance = tokenBalance.value.uiAmount || 0;

                        document.getElementById('qupdevBalance').textContent = qupdevBalance + ' QUPDEV';
                        addLog('QUPDEV balance loaded: ' + qupdevBalance + ' QUPDEV', 'success');

                        if (qupdevBalance === 0) {
                            document.getElementById('needTokens').style.display = 'block';
                            document.getElementById('hasTokens').style.display = 'none';
                            addLog('You need QUPDEV tokens to stake!', 'warning');
                        } else {
                            document.getElementById('hasTokens').style.display = 'block';
                            document.getElementById('needTokens').style.display = 'none';
                            addLog('Found ' + qupdevBalance + ' QUPDEV tokens - ready for staking!', 'success');
                        }
                    } else {
                        document.getElementById('qupdevBalance').textContent = '0 QUPDEV';
                        document.getElementById('needTokens').style.display = 'block';
                        document.getElementById('hasTokens').style.display = 'none';
                        addLog('No QUPDEV token account found for mint: ' + VAULT_CONFIG.qupdevMint.toString(), 'warning');
                        addLog('This means no QUPDEV tokens have been sent to this wallet yet.', 'info');
                    }
                } catch (tokenError) {
                    addLog('Error loading QUPDEV tokens: ' + tokenError.message, 'error');
                    document.getElementById('qupdevBalance').textContent = 'Error loading';
                    document.getElementById('needTokens').style.display = 'block';
                    document.getElementById('hasTokens').style.display = 'none';
                    addLog('Token loading failed - may need to request test tokens', 'warning');
                }

            } catch (error) {
                addLog('Failed to load balances: ' + error.message, 'error');
                document.getElementById('solBalance').textContent = 'Error loading';
                document.getElementById('qupdevBalance').textContent = 'Error loading';
            }
        }

        function copyAddress() {
            if (wallet) {
                navigator.clipboard.writeText(wallet.toString());
                addLog('Wallet address copied! Now email it to chris@qupcorp.com', 'success');

                const copyBtn = document.getElementById('copyBtn');
                const originalText = copyBtn.innerHTML;
                copyBtn.innerHTML = '‚úÖ Copied!';
                copyBtn.style.background = '#4CAF50';

                setTimeout(function() {
                  copyBtn.innerHTML = originalText;
                    copyBtn.style.background = '';
                }, 2000);
            }
        }

        function openEmailTemplate() {
            if (wallet) {
                const walletAddress = wallet.toString();
                const subject = encodeURIComponent('QUP Devnet Test Tokens Request');
                const body = encodeURIComponent('Hi Chris,\n\nPlease send test tokens to my devnet wallet:\n\n' + walletAddress + '\n\nThanks!');

                const mailtoLink = 'mailto:chris@qupcorp.com?subject=' + subject + '&body=' + body;
                window.open(mailtoLink);

                addLog('Email template opened! Send the email and wait for your tokens.', 'success');
            }
        }

        function runQuickTest() {
            addLog('=== SYSTEM DIAGNOSTICS ===', 'info');
            addLog('Connected wallet: ' + (wallet ? wallet.toString() : 'None'), 'info');
            addLog('QUPDEV mint address: ' + VAULT_CONFIG.qupdevMint.toString(), 'info');
            addLog('Connection endpoint: ' + (connection ? connection.rpcEndpoint : 'None'), 'info');
            addLog('SPL Token library loaded: ' + (typeof splToken !== 'undefined'), 'info');
            addLog('Web3 library loaded: ' + (typeof solanaWeb3 !== 'undefined'), 'info');

            if (wallet) {
                addLog('Current connected wallet: ' + wallet.toString(), 'info');
                addLog('Wallet has tokens and is ready for REAL staking!', 'success');
            } else {
                addLog('No wallet connected', 'warning');
            }

            addLog('=== COMMAND LINE VALIDATION COMMANDS ===', 'info');
            addLog('To validate your setup, run these commands:', 'info');
            addLog('', 'info');
            addLog('1. Check your wallet balance:', 'info');
            addLog('   solana balance ' + (wallet ? wallet.toString() : 'YOUR_WALLET') + ' --url devnet', 'info');
            addLog('', 'info');
            addLog('2. Check QUPDEV token balance:', 'info');
            addLog('   spl-token balance ' + VAULT_CONFIG.qupdevMint.toString() + ' --owner ' + (wallet ? wallet.toString() : 'YOUR_WALLET') + ' --url devnet', 'info');
            addLog('', 'info');
            addLog('3. Check vault state:', 'info');
            addLog('   solana account ' + VAULT_CONFIG.vaultPda.toString() + ' --url devnet', 'info');
            addLog('', 'info');
            addLog('4. Check if user stake account exists:', 'info');
            if (wallet) {
                getUserStakePda().then(function(pda) {
                    addLog('   solana account ' + pda.toString() + ' --url devnet', 'info');
                    addLog('   (This will fail if you haven\'t staked yet - that\'s normal)', 'warning');
                }).catch(function(error) {
                    addLog('   Error getting PDA: ' + error.message, 'error');
                });
            } else {
                addLog('   (Connect wallet first to get your specific PDA)', 'warning');
            }
            addLog('', 'info');
            addLog('5. Validate program exists:', 'info');
            addLog('   solana account ' + VAULT_CONFIG.programId.toString() + ' --url devnet', 'info');

            addLog('=== SYSTEM STATUS ===', 'info');
            addLog('Wallet Connection: Working', 'success');
            addLog('Balance Loading: Working', 'success');
            addLog('Devnet Connection: Working', 'success');
            addLog('Smart Contract Integration: Ready', 'success');
            addLog('SPL Token Constants: Hardcoded (working)', 'success');
            addLog('=== READY FOR REAL STAKING ===', 'success');
        }

        function openExplorer() {
            const url = 'https://explorer.solana.com/address/' + VAULT_CONFIG.vaultPda.toString() + '?cluster=devnet';
            window.open(url, '_blank');
            addLog('Opened vault in Solana Explorer', 'info');
        }

        async function checkVaultState() {
            if (!wallet) {
                addLog('Please connect your wallet first!', 'error');
                alert('Please connect your wallet first!');
                return;
            }

            try {
                addLog('Checking vault state on-chain...', 'info');
                const vaultAccount = await connection.getAccountInfo(VAULT_CONFIG.vaultPda);
                if (vaultAccount) {
                    addLog('Vault exists: ' + vaultAccount.data.length + ' bytes, ' + vaultAccount.lamports + ' lamports', 'success');
                    addLog('Owner: ' + vaultAccount.owner.toString(), 'info');
                    alert('Vault is active! Check the log for details.');
                } else {
                    addLog('Vault account not found!', 'error');
                    alert('Vault account not found on the blockchain!');
                }
            } catch (error) {
                addLog('Failed to check vault state: ' + error.message, 'error');
                alert('Error checking vault: ' + error.message);
            }
        }

        // Staking workflow functions
        let selectedDuration = 0;
        let selectedAPY = 0;
        let stakingAmount = 0;

        function proceedToStakingPlan() {
            addLog('Proceeding to staking plan selection...', 'info');
            document.getElementById('stakingPlanSection').style.display = 'block';
            document.getElementById('stakingPlanSection').scrollIntoView({ behavior: 'smooth' });
        }

        function selectDuration(element) {
            // Remove selected class from all options
            document.querySelectorAll('.duration-option').forEach(function(opt) {
                opt.style.background = 'rgba(255,255,255,0.2)';
                opt.style.borderColor = 'rgba(255,255,255,0.3)';
            });

            // Add selected style to clicked option
            element.style.background = 'rgba(255,255,255,0.4)';
            element.style.borderColor = 'white';

            selectedDuration = parseInt(element.getAttribute('data-duration'));
            selectedAPY = parseInt(element.getAttribute('data-apy'));

            addLog('Selected ' + selectedDuration + ' day plan with ' + selectedAPY + '% APY', 'info');
            calculateRewards();
        }

        function calculateRewards() {
            const amount = parseFloat(document.getElementById('stakeAmount').value) || 0;
            stakingAmount = amount;

            if (amount > 0 && selectedAPY > 0) {
                const dailyRate = selectedAPY / 100 / 365;
                const dailyReward = amount * dailyRate;
                const totalReward = amount * (selectedAPY / 100) * (selectedDuration / 365);

                document.getElementById('dailyRewards').textContent = dailyReward.toFixed(4) + ' QUP';
                document.getElementById('totalRewards').textContent = (amount + totalReward).toFixed(2) + ' QUP';

                document.getElementById('confirmStakingPlan').disabled = false;
            } else {
                document.getElementById('dailyRewards').textContent = 'Select plan above';
                document.getElementById('totalRewards').textContent = 'Select plan above';
                document.getElementById('confirmStakingPlan').disabled = true;
            }
        }

        function confirmStakingPlan() {
            if (stakingAmount <= 0 || selectedDuration <= 0) {
                alert('Please enter an amount and select a duration.');
                return;
            }

            const planHTML = '<h4>Your Staking Plan:</h4>' +
                '<p><strong>Amount:</strong> ' + stakingAmount + ' QUPDEV</p>' +
                '<p><strong>Duration:</strong> ' + selectedDuration + ' days</p>' +
                '<p><strong>APY:</strong> ' + selectedAPY + '%</p>' +
                '<p><strong>Expected Daily Rewards:</strong> ' + (stakingAmount * selectedAPY / 100 / 365).toFixed(4) + ' QUP</p>' +
                '<p><strong>Total After ' + selectedDuration + ' Days:</strong> ' + (stakingAmount + stakingAmount * selectedAPY / 100 * selectedDuration / 365).toFixed(2) + ' QUP</p>';

            document.getElementById('finalStakingPlan').innerHTML = planHTML;
            document.getElementById('executeStakingSection').style.display = 'block';
            document.getElementById('executeStakingSection').scrollIntoView({ behavior: 'smooth' });

            addLog('Staking plan confirmed! Ready to execute.', 'success');
        }

        function executeStaking() {
            if (!wallet || !connection) {
                addLog('‚ùå Wallet or connection not initialized!', 'error');
              alert('Please ensure your wallet is connected and try again.');
                return;
            }

            if (stakingAmount <= 0 || selectedDuration <= 0) {
                addLog('‚ùå Invalid staking parameters!', 'error');
                alert('Please set a valid amount and duration.');
                return;
            }

            addLog('üöÄ Starting REAL staking transaction on Solana devnet...', 'info');
            addLog('Amount: ' + stakingAmount + ' QUPDEV', 'info');
        addLog('Duration: ' + selectedDuration + ' days', 'info');
            addLog('APY: ' + selectedAPY + '%', 'info');

            const executeBtn = document.getElementById('executeStaking');
            executeBtn.disabled = true;
            executeBtn.innerHTML = '<span class="loading"></span> Creating Transaction...';

            // Real staking implementation
            executeRealStaking()
                .then(function() {
                    addLog('‚úÖ REAL staking transaction completed successfuy!', 'success');
                    addLog('Your ' + stakingAmount + ' QUPDEV tokens are now earning ' + selectedAPY + '% APY on-chain!', 'success');

                    document.getElementById('stakingSuccess').style.display = 'block';
                    document.getElementById('stakingSuccess').scrollIntoView({ behavior: 'smooth' });
                })
                .catch(function(error) {
                    addLog('‚ùå Staking transaction failed: ' + error.message, 'error');
                    alt('Transaction failed: ' + error.message);
                })
                .finally(function() {
                    executeBtn.disabled = false;
                    executeBtn.innerHTML = 'üöÄ Start Staking & Earning!';
                });
        }

        async function executeRealStaking() {
            try {
                addLog('Building real staking transaction...', 'info');

                // Calculate amount in smallest units (assuming 6 decimals like SOL)
                const amountLampor = Math.floor(stakingAmount * 1e6);
                addLog('Amount in lamports: ' + amountLamports, 'info');

                // Generate the user stake PDA
                const userStakePda = await getUserStakePda();
                addLog('User stake PDA: ' + userStakePda.toString(), 'info');

                // Prepare instruction data (FIXED: only amount, no duration)
                const instructionData = prepareStakeInstructionData(amountLamports);
                addLog('Instruction data prepared', 'info');

                // Create the staking instruction with CORRECT account order
                const stakeInstruction = new solanaWeb3.TransactionInstruction({
                    programId: VAULT_CONFIG.programId,
                    keys: [
                        // 1. vault (mut) - FIRST
                        { pubkey: VAULT_CONFIG.vaultPda, isSigner: false, isWritable: true },
                        // 2. user_stake (init_if_needed, mut) - SECOND
                        { pubkey: userStakePda, isSigner: false, isWritable: true },
                        // 3. user (signer, mut) - THIRD
                        { pubkey: wallet, isSigner: true, isWritable: true },
                        // 4. user_token_account (mut) - FOURTH
                        { pubkey: userTokenAccount, isSigner: false, isWritable: true },
                        // 5. token_vault (mut) - FIFTH
                        { pubkey: VAULT_CONFIG.tokenVaultPda, isSigner: false, isWritable: true },
                        // 6. token_program - SIXTH
                        { pubkey: new solanaWeb3.PublicKey('TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'), isSigner: false, isWritable: false },
                        // 7. system_program - SEVENTH
                        { pubkey: solanaWeb3.SystemProgram.programId, isSigner: false, isWritable: false },
                        // 8. rent - EIGHTH
                        { pubkey: solanaWeb3.SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false }
                    ],
                    data: instructionData
                });

                // Create and send transaction with explicit compute budget
                const transaction = new solanaWeb3.Transaction();

                // Add compute budget instruction first to control it explicitly
                const computeBudgetInstruction = solanaWeb3.ComputeBudgetProgram.setComputeUnitLimit({
                    units: 400000  // Increase compute units for the transaction
                });
                transaction.add(computeBudgetInstruction);

                // Add our staking instruction
                transaction.add(stakeInstruction);
                const latestBlockhash = await connection.getLatestBlockhash('confirmed');
                transaction.recentBlockhash = latestBlockhash.blockhash;
                transaction.feePayer = wallet;

                addLog('Requesting wallet signature...', 'info');

                const signedTx = await provider.signTransaction(transaction);

                addLog('Sending transaction to Solana devnet...', 'info');
                const signature = await connection.sendRawTransaction(signedTx.serialize(), {
                    skipPreflight: true,  // Skip simulation to avoid 0xbc2 error
                    preflightCommitment: 'confirmed'
                });

                addLog('Transaction signature: ' + signature, 'success');
                addLog('Explorer: https://explorer.solana.com/tx/' + signature + '?cluster=devnet', 'info');

                addLog('Confirming transaction...', 'info');
                const confirmation = await connection.confirmTransaction(signature, 'confirmed');

                if (confirmation.value.err) {
                    throw new Error('Transaction failed: ' + JSON.stringify(confirmation.value.err));
                }

                addLog('Transaction confirmed on Solana blockchain!', 'success');
                return signature;

            } catch (error) {
                // Better error handling - extract meaningful error information
                let errorMessage = 'Unknown error';

                if (error && error.message) {
                    errorMessage = error.message;
                } else if (error && error.toString) {
                    errorMessage = error.toString();
                } else if (typeof error === 'string') {
                    errorMessage = error;
                } else if (error) {
                    errorMessage = JSON.stringify(error);
                }

                addLog('Error in executeRealStaking: ' + errorMessage, 'error');

                // Provide helpful error messages
                if (errorMessage.includes('insufficient funds')) {
                    addLog('Make sure you have enough SOL for transaction fees (need ~0.001 SOL)', 'warning');
                } else if (errorMessage.includes('rejected')) {
                    addLog('Transaction was rejected in wallet. Please try again.', 'warning');
                } else if (errorMessage.includes('Invalid account')) {
                    addLog('Smart contract account error. Check vault configuration.', 'warning');
                } else if (errorMessage.includes('Instruction #3 Failed') || errorMessage.includes('Custom":3010')) {
                    addLog('Smart contract execution failed. Check account order and parameters.', 'warning');
                }

                throw new Error(errorMessage);
            }
        }

        async function getUserStakePda() {
            const [pda] = await solanaWeb3.PublicKey.findProgramAddress(
                [
                    new TextEncoder().encode('user_stake'),
                    wallet.toBuffer(),
                    VAULT_CONFIG.vaultPda.toBuffer()
                ],
                VAULT_CONFIG.programId
            );
            return pda;
        }

        function prepareStakeInstructionData(amountLamports) {
            // Using the discriminators from your original code
            const stakeDiscriminator = new Uint8Array([206, 176, 202, 18, 200, 209, 179, 108]);

            // Amount as 64-bit little-endian (ONLY amount, no duration!)
            const amountBytes = new ArrayBuffer(8);
            const amountView = new DataView(amountBytes);
            amountView.setBigUint64(0, BigInt(amountLamports), true);

            // Combine discriminator + amount (NO duration!)
            const instructionData = new Uint8Array(stakeDiscriminator.length + 8);
            instructionData.set(stakeDiscriminator, 0);
            instructionData.set(new Uint8Array(amountBytes), stakeDiscriminator.length);

            return instructionData;
        }

        document.addEventListener('DOMContentLoaded', function() {
            // Complete initialization reset
            wallet = null;
            connection = null;
            userTokenAccount = null;
            provider = null;
            selectedDuration = 0;
            selectedAPY = 0;
            stakingAmount = 0;

            // Clear any cached data from browser
            try {
                if (typeof localStorage !== 'undefined') localStorage.clear();
                if (typeof sessionStorage !== 'undefined') sessionStorage.clear();
            } catch (e) {
                // Ignore if not available
            }

            let attempts = 0;
            const maxAttempts = 20;

            function initializeApp() {
                addLog('Initializing QUP Vault Staking Platform...', 'info');

                if (typeof solanaWeb3 === 'undefined') {
                    attempts++;
                    if (attempts >= maxAttempts) {
                        addLog('ERROR: Solana Web3 library failed to load after ' + maxAttempts + ' attempts', 'error');
                        addLog('Please check your internet connection and refresh the page', 'error');
                        alert('Failed to load Solana libraries. Please refresh the page and try again.');
                        return;
                    }
                    addLog('Attempt ' + attempts + ': Waiting for Solana Web3 library...', 'info');
                    setTimeout(initializeApp, 1000);
                    return;
                }

                addLog('Solana Web3 library loaded successfully!', 'success');
                addLog('Using hardcoded SPL Token constants (library not needed)', 'info');

                if (!initConnection()) {
                    addLog('Failed to initialize Solana connection', 'error');
                    alert('Failed to connect to Solana devnet. Please check your internet connection.');
                    return;
                }

                addLog('QUP Vault Staking Platform loaded successfully!', 'success');
                addLog('Ready for fresh wallet connection!', 'info');

                // Test connection
                connection.getVersion().then(function(version) {
                    addLog('Connected to Solana devnet (version: ' + version['solana-core'] + ')', 'success');
                }).catch(function(error) {
                    addLog('Warning: Could not verify devnet connection: ' + error.message, 'warning');
                });
            }

            initializeApp();

            document.getElementById('connectBtn').addEventListener('click', connectWallet);
            document.getElementById('disconnectBtn').addEventListener('click', disconnectWallet);
            document.getElementById('copyBtn').addEventListener('click', copyAddress);
            document.getElementById('emailBtn').addEventListener('click', openEmailTemplate);
            document.getElementById('quickTestBtn').addEventListener('click', runQuickTest);
            document.getElementById('explorerBtn').addEventListener('click', openExplorer);
            document.getElementById('vaultStateBtn').addEventListener('click', checkVaultState);

            // Staking workflow event listeners
            document.getElementById('proceedToStaking').addEventListener('click', proceedToStakingPlan);
            document.getElementById('confirmStakingPlan').addEventListener('click', confirmStakingPlan);
            document.getElementById('executeStaking').addEventListener('click', executeStaking);

            // Duration selection event listeners
            document.querySelectorAll('.duration-option').forEach(function(option) {
                option.addEventListener('click', function() {
                    selectDuration(this);
                });
            });

            // Amount input event listener
            document.getElementById('stakeAmount').addEventListener('input', calculateRewards);
        });
    </script>
</body>
</html>
